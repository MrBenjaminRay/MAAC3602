<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// HEALTH/SHIELD BAR:
healthBarXOffset = 0;
healthBarYOffset = sprite_height - 10;

healthBarHeight = 10;
healthBarWidth = sprite_width;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>saleStateEnabled</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>costRecoveryPercentage</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.25</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_towerDestroy, 0, false);
audio_sound_gain(snd_towerDestroy, 0.7, 0);  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override obj_entity's step event.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

var nearestEnemy = scr_misc_gearNearestObjectOfType(attackRange, obj_enemy_ground);

// Shrink any existing weapon kickback
if (weaponKickback &gt; 0) {
    weaponKickback -= weaponKickbackResetSpeed * global.deltaTime;
    clamp(weaponKickback, 0, weaponKickbackMax);
}

if (nearestEnemy != noone) {
    if (attackRateCounter &gt;= attackRate) {
        attackRateCounter = 0;
        
        // Rotate the cannon to point towards the enemy:
        var enemyX = nearestEnemy.x + nearestEnemy.sprite_width/2;
        var enemyY = nearestEnemy.y + nearestEnemy.sprite_height/2;
        var enemyDirection = point_direction(weaponObj.x, weaponObj.y, enemyX, enemyY);
        weaponObj.image_angle = enemyDirection;
        
        // Spawn projectile (account for any existing kickback):
        var projX = x + weaponXOffset + weaponKickbackOffsetX + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
        var projY = y + weaponYOffset + weaponKickbackOffsetY + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
        scr_spawn_projectile(obj_projectile_normal, projX, projY, nearestEnemy, false, attackDamage);
        
        // Show projectile spawn effect:
        scr_create_explosion(projX, projY, 'Flash');
        
        // Start kickback
        scr_entity_weaponKickback_Start();

    }
}

// Calculate additional x/y weapon offset based on weapon kickback
// Negative value X, positive value Y (because 0 is up)
weaponKickbackOffsetX = -weaponKickback * cos(degtorad(weaponObj.image_angle));
weaponKickbackOffsetY = weaponKickback * sin(degtorad(weaponObj.image_angle));

// Adjust the weapon position with kickback offset applied
weaponObj.x = x + weaponXOffset + weaponKickbackOffsetX;
weaponObj.y = y + weaponYOffset + weaponKickbackOffsetY;

attackRateCounter += global.deltaTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// When the mouse is right-clicked anywhere except for on a tower,
// then all towers have their sell states disabled and sale buttons
// deleted.
var intersectedTower = collision_rectangle(mouse_x, mouse_y, mouse_x, mouse_y, obj_tower, false, false);

show_debug_message(intersectedTower);

if (intersectedTower == noone) {
    // Disable sale state for all other towerS:
    with (obj_tower) {
        saleStateEnabled = false;
    }
    
    // Destroy all existing sell buttons:
    with (obj_button_sellTower) {
        instance_destroy();
    }
} else if (intersectedTower == self) {
    // Disable sale state for all other towerS:
    with (obj_tower) {
        saleStateEnabled = false;
    }
    
    // Destroy all existing sell buttons:
    with (obj_button_sellTower) {
        instance_destroy();
    }
    
    // Enable sale state:
    saleStateEnabled = true;
    
    // Create a new sell button for this tower:
    var sellButton = instance_create(x, y - 32, obj_button_sellTower);
    sellButton.tower = self;
    sellButton.costRecoveryPercentage = costRecoveryPercentage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Disable sale state for all other towerS:
with (obj_tower) {
    saleStateEnabled = false;
}

// Destroy all existing sell buttons:
with (obj_button_sellTower) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (saleStateEnabled == false) {
    return 0;
}

// Draw Sale Overlay:
draw_sprite_stretched(spr_sell_overlay, 0, x, y, sprite_width, sprite_height);

// CALCULATE TOWER SALE PRICE:
var towerHealthPct = currHealth/maxHealth;
var salePrice = -1;

switch (self.object_index) {
    case obj_tower_caterpillager: {
        salePrice = ((global.towers[0, 1] * global.towerUpgradeLevel[0]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
    case obj_tower_slothOnRope: {
        salePrice = ((global.towers[1, 1] * global.towerUpgradeLevel[1]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
    case obj_tower_tacticalTitmouse: {
        salePrice = ((global.towers[2, 1] * global.towerUpgradeLevel[2]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
    case obj_tower_109CaliBear: {
        salePrice = ((global.towers[3, 1] * global.towerUpgradeLevel[3]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
    case obj_tower_fireAnt: {
        salePrice = ((global.towers[4, 1] * global.towerUpgradeLevel[4]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
    case obj_tower_RT6100: {
        salePrice = ((global.towers[5, 1] * global.towerUpgradeLevel[5]) * towerHealthPct) * costRecoveryPercentage;
        break;
    }
}

/////////////////////////////////////////// DRAW TOWER SELL PRICE:
// Determine Position:
var xCoord = x + 32;
var yCoord = y - 16;

// Set Font:
draw_set_font(fnt_towerPlacement);

// Draw Background:
draw_set_color(c_black);
draw_text(xCoord + 1, yCoord + 1, "Recover " + string(salePrice) + " Energy");

// Draw Foreground:
draw_set_color(c_yellow);
draw_text(xCoord, yCoord, "Recover " + string(salePrice) + " Energy");

// Reset Draw Color:
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
