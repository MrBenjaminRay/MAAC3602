<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeBetweenEmissions = 0; // This should be set by each inheriting class
timeToNextEmission = 0;
particleScale = 1; // x/y scale of particles to be emitted. 1 = default. Override for smaller.

// Emitter MUST have a parent object instance. When the parent object instance is destroyed,
// the emitter destroys itself. Particles already self-destruct.
parentObject = noone;

maxImageAlpha = 1; // To be overridden by inheriting objects as needed.

particleType = noone; // Type of particle. MUST be overridden by inheriting objects.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(parentObject)) {
    // Parent object instance has been destroyed, so this emitter must also go
    instance_destroy();
    return 0;
}

// Emitter location always same as parent object (the thing that appears to be emitting)
x = parentObject.x;
y = parentObject.y;

if (timeToNextEmission &lt;= 0) {
    // Emit
    var inst = instance_create(x, y, particleType);

    // Set scale
    inst.image_xscale = particleScale;
    inst.image_yscale = particleScale;
    
    // Set image alpha values
    inst.maxImageAlpha = maxImageAlpha;
    
    // Reset variable
    timeToNextEmission = timeBetweenEmissions;
} else {
    // Decrease by delta time
    timeToNextEmission -= global.deltaTime;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
