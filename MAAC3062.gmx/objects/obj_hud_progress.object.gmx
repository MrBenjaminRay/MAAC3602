<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_progressHUD</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scale = 1;

kills = 0;
killsRequired = 0;

// Set position
x = global.screenWidth * 3 / 4 + 38 - sprite_width/2; // Half way between left and center
y = global.screenHeight - 37 - sprite_height/2;

// Bar configuration
barWidth = 0; // Current bar width, based on barWidthTotal * kills / killsRequired
barWidthTotal = 250; 
barHeight = 22;
barColor = c_blue;
barX1 = x + 15;
barY1 = y + 17;
barX2 = barX1 + barWidthTotal;
barY2 = barY1 + barHeight;


//tool tip stuff
mouseHoverTime = 0;
toolTipEnabled = false;

shadowOffset = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get the data we need to draw the bar
if (instance_exists(obj_control_bosses)) {
    killsRequired = obj_control_bosses.requiredKills;
    kills = scr_statistics_getData(28);
}

// Set image scale
image_xscale = scale;
image_yscale = scale;


// Hover tooltip stuff
if (
    point_in_rectangle(
        window_mouse_get_x(), 
        window_mouse_get_y(), 
        x,
        y,
        x+sprite_width,
        y+sprite_height
    )
) {
    if(!toolTipEnabled)
        mouseHoverTime++;
}
else {
    mouseHoverTime = 0;
    toolTipEnabled = false;
}

if(mouseHoverTime &gt;= 60)
    toolTipEnabled = true;

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the progress bar behind the sprite
draw_healthbar(barX1, barY1, barX2, barY2,  100 * kills/killsRequired, c_black, c_blue, c_aqua, 0, false, false);
// Draw the hud element itself
draw_self();

if(mouseHoverTime &gt;= 45) {

    var text;
    text[0] = '';
    text[1] = ''
    text[2] = string(kills) + ' of ' + string(killsRequired) + 'kills before boss arrives.';
    
    var backX = x + sprite_width/2;
    var backY = y-22;
    
    // NOTE: Use round() when positioning text to ensure it is not divided up over 1/2 pixels

    // Configure
    draw_set_font(fnt_hud_hoverNew);
    draw_set_halign(fa_center); // Align text so we don't have to calculate its width
    draw_set_colour(c_white);
    draw_set_alpha(1);
    
    // Draw text line 1
    draw_set_colour(c_black);
    draw_set_alpha(.5);
    draw_text(
        round(backX - shadowOffset), // Center drawing point horizontally
        round(backY - 28 + shadowOffset),
        text[0]
    );
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text(
        round(backX), // Center drawing point horizontally
        round(backY - 28),
        text[0]
    );

    // Draw text line 2
    draw_set_colour(c_black);
    draw_set_alpha(.5);
    draw_text(
        round(backX + shadowOffset), // Center drawing point horizontally
        round(backY - 14 + shadowOffset),
        text[1]
    );
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text(
        round(backX), // Center drawing point horizontally
        round(backY - 14),
        text[1]
    );
    
    // Draw text line 3
    draw_set_colour(c_black);
    draw_set_alpha(.5);
    draw_text(
        round(backX + shadowOffset), // Center drawing point horizontally
        round(backY + shadowOffset),
        text[2]
    );
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text(
        round(backX), // Center drawing point horizontally
        round(backY),
        text[2]
    );
    
    // Reset drawing stuff to defaults
    draw_set_halign(fa_left);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw in Draw GUI Event</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
