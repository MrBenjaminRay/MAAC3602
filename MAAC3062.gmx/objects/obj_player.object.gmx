<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_new_standing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allowedToFire</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Override movement-related variables for player:
movementSpeedDefault = 310 / 1000;
movementSpeedAcceleration = 0.005;  // Speed at which to accelerate movement speed until moving at movementSpeedDesired
movementSpeedDeceleration = 0.01;   // Speed at which to decelerate movement speed until moving at movementSpeedDesired

// Override jump speed for player
jumpSpeed = .72;            // Jump Speed

animationSpeed = 0.33;

image_scale_default = .6;
image_xscale = image_scale_default;
image_yscale = image_scale_default;

// ???
image_speed = 0;
walkRight = 0;
walkLeft = 0;

facingDirection = 1; // 1 for right, -1 for left

// Shield Stuff:
currShield = 200;
maxShield = 200;

currHealth = 150;
maxHealth = 150;

shieldRegenInterval = room_speed * 5;
alarm[0] = shieldRegenInterval;

// Create and place weapon:
attackDamage = 4;
attackRate = 256;
weaponXOffset = 0;
weaponYOffset = 3;
weaponObj = instance_create(x + weaponXOffset, y + weaponYOffset, obj_weapon_playerArm);
weaponKickbackMax = 4;             // Override width-based weapon kickback maximum for player.
weaponKickbackResetSpeed = 0.075;    // Override weapon kickback speed for player.

shootKnockback = 4;         // Knockback distance when player fires weapon. Will be in opposite direction of gun.

firingPaused = false;

xKeyHeld = 0;
xKeyHeldCounter = 0;


// HEALTH/SHIELD BAR:
healthBarXOffset = -20;
healthBarYOffset = -54;

healthBarHeight = 14;
healthBarWidth = sprite_width;


// ABILITIES:
abilC_isActive = false;

abilA_cooldownTime = 0;
abilB_cooldownTime = 0;
abilC_cooldownTime = 0;
abilD_cooldownTime = 0;

abilA_cooldownCounter = 0;
abilB_cooldownCounter = 0;
abilC_cooldownCounter = 0;
abilD_cooldownCounter = 0;

global.energy = 900;

switch(room)
{
    case rm_level_moon:
        global.maxFuel = 1000;
        break;
    case rm_level_forest:
        global.maxFuel = 2000;
        break;
    case rm_level_desert:
        global.maxFuel = 2500;
        break;
}

if (global.plrAbilityUpgraded[0]) {
    abilA_cooldownTime = global.plrAbilityCooldown_upgraded[0];
} else {
    abilA_cooldownTime = global.plrAbilityCooldown_normal[0];
}
abilA_cooldownCounter = abilA_cooldownTime;

if (global.plrAbilityUpgraded[1]) {
    abilB_cooldownTime = global.plrAbilityCooldown_upgraded[1];
} else {
    abilB_cooldownTime = global.plrAbilityCooldown_normal[1];
}
abilB_cooldownCounter = abilB_cooldownTime;

if (global.plrAbilityUpgraded[2]) {
    abilC_cooldownTime = global.plrAbilityCooldown_upgraded[2];
} else {
    abilC_cooldownTime = global.plrAbilityCooldown_normal[2];
}

abilC_cooldownCounter = abilC_cooldownTime;


abilD_cooldownTime = global.plrAbilityCooldown_normal[3];
abilD_cooldownCounter = abilD_cooldownTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_player_death</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.currentLevelComplete == 0) {
    scr_statistics_setData(26, false); // Set the boss as "Not Spawned"
}

scr_doLevelFail_playerDead();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firingPaused</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.plrAbilityUpgraded[2]) {
    scr_abilC_upgraded_disable();
} else {
    scr_abilC_normal_disable();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>allowedToFire</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currShield &lt; maxShield) {
    currShield += 25;
}

if (currShield &gt; maxShield) {
    currShield = maxShield;
}

alarm[0] = shieldRegenInterval;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Drop Through Platform (BEFORE INHERITED EVENT)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Check input - does player want to drop through the platform?

var isDownPressed = keyboard_check(ord('s')) || keyboard_check(ord('S'));

if (isDownPressed) {
    scr_entity_drop();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement &amp; Sprite Changes (BEFORE INHERITED EVENT)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// LEFT &amp; RIGHT MOVEMENT INPUT:
var isLeftPressed = keyboard_check(ord('a')) || keyboard_check(ord('A'));
var isRightPressed = keyboard_check(ord('d')) || keyboard_check(ord('D'));


// SET MOVEMENT AND SPRITE DIRECTION

if (isLeftPressed &amp;&amp; isRightPressed) {
    // Both left &amp; right are pressed. Movement should be stopped.
    movementSpeedDesired = 0;   // Set desired speed
    hspeed = 0;                 // Immediately stop horizontal movement
} else if (isLeftPressed) {
    // Set desired speed (will speed up smoothly if not already moving)
    movementSpeedDesired = -movementSpeedDefault * movementSpeedAdjust;
    // Set sprite direction to face left
    image_xscale = -image_scale_default;
    
    //image_speed = animationSpeed * animationSpeedAdjust;
    //image_xscale = -1;
    //if (isJumping) {
    //    sprite_index = spr_player_new_jump;
    //} else {
    //    sprite_index = spr_player_new;
    //}
    facingDirection = -1; // Set this so we know player is facing left

} else if (isRightPressed) {
    // Set desired speed (will speed up smoothly if not already moving)
    movementSpeedDesired = +movementSpeedDefault * movementSpeedAdjust;
    // Set sprite direction to face right
    image_xscale = image_scale_default;
    
    //image_speed = animationSpeed * animationSpeedAdjust;
    //image_xscale = 1;
    //if (isJumping) {
    //    sprite_index = spr_player_new_jump;
    //} else {
    //    sprite_index = spr_player_new;
    //}
    facingDirection = 1; // Set this so we know player is facing right

} else {
    // Set desired speed = 0 (will slow down smoothly)
    movementSpeedDesired = 0;
    // Do not change sprite direction
}

// SET SPRITE

if (isJumping) {
    // Player is jumping (lasts until lands on a platform
    sprite_index = spr_player_new_jump;
} else if (vspeed &gt; .1) {
    // Player is falling (use a threshold above 0 otherwise this will trigger every time gravity pulls him
    // down through a platform
    sprite_index = spr_player_new_falling;
} else {
    // Not jumping or falling
    if (isLeftPressed ^^ isRightPressed) { // EXCLUSIVE OR
        // Only left or right is pressed, BUT NOT BOTH
        sprite_index = spr_player_new;
    } else {
        // Either both left &amp; right are pressed, or neither are pressed
        sprite_index = spr_player_new_standing;
    }
}

//if(!(isRightPressed || isLeftPressed)) {
//    //image_speed = 0;
//    if (isJumping) {
//        if (sprite_index != spr_player_jump_right &amp;&amp; sprite_index != spr_player_jump_left) {
//            // Jumping while standing still but not showing a jumping sprite,
//            // so pick left or right jumping sprite at random
//            if (irandom(1) == 1) {
//                sprite_index = spr_player_jump_right;
//            } else {
//                sprite_index = spr_player_jump_left;
//            }        
//        }
//    } else {
//        // Player is standing still, so show correct sprite.
//        sprite_index = spr_player_new_standing;
//        if (facingDirection == 1) {
//            // Player standing facing right
//            image_xscale = 1;
//        } else if (facingDirection == -1) {
//            // Player standing facing left
//            image_xscale = -1;
//        }
//    }
//}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stop Out of Bounds Movement (BEFORE INHERITED EVENT)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player is trying to move off of the left side of the screen. Stop movement.
if (bbox_left &lt; 0) {
    //show_debug_message('Left Edge ' + string(0) + ', ' + string(bbox_left) + ', ' + string(x) + ', ' + string(bbox_right) + ', ' + string(room_width));
    scr_entity_stopMoving_Sudden();
    while (bbox_left &lt; 0) {
        x++;
    }    
}

if (bbox_right &gt; room_width) {
    //show_debug_message('Right Edge ' + string(0) + ', ' + string(bbox_left) + ', ' + string(x) + ', ' + string(bbox_right) + ', ' + string(room_width));
    scr_entity_stopMoving_Sudden();
    while (bbox_right &gt; room_width) {
        x--;
    }    
}

//if (x - sprite_width * image_xscale / 2 &lt; 0 &amp;&amp; movementSpeedDesired &lt; 0) {
//    show_debug_message('left border hit');
//    scr_entity_stopMoving_Sudden();
//}

// Player is trying to move off of the right side of the screen. Shut 'er down.
//if (x + sprite_width * image_xscale / 2 &gt; room_width &amp;&amp; movementSpeedDesired &gt; 0) {
//    show_debug_message('right border hit');
//    scr_entity_stopMoving_Sudden();
//}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Weapon Kickback Calculate</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Calculate additional x/y weapon offset based on weapon kickback
// Negative value X, positive value Y (because 0 is up)
if (is_undefined(weaponObj) == false) {
    weaponKickbackOffsetX = -weaponKickback * cos(degtorad(weaponObj.image_angle));
    weaponKickbackOffsetY = weaponKickback * sin(degtorad(weaponObj.image_angle));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Projectile Firing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (weaponObj != noone) {
    if (attackRateCounter &lt; attackRate) {
        attackRateCounter += global.deltaTime;
    }
}

if (mouse_check_button(mb_left)) {
    var canFire = global.state != "Paused";
    canFire &amp;= global.state != "Build";
    canFire &amp;= global.state != "Destroy";
    canFire &amp;= weaponObj != noone;
    canFire &amp;= firingPaused == false;
    
    if (canFire &amp;&amp; allowedToFire) {
        if (attackRateCounter &gt;= attackRate) {
            audio_play_sound(snd_playerGun, 0, false);
       
            // Set starting position of projectile based on weapon position, angle, and kickback position before we fire this shell
            var projX = x + weaponXOffset + weaponKickbackOffsetX + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
            var projY = y + weaponYOffset + weaponKickbackOffsetY + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
            
            // Add slight offset, as end of gun is higher in the sprite than origin (rotation point) of arm.
            // Offset is positive for one arm and negative for the other (sprite is inverted vertically).
            var vOffset;
            if (weaponObj.image_yscale &lt; 0) {
                vOffset = -4;
            } else if (weaponObj.image_yscale &gt; 0) {
                vOffset = 4;
            } else {
                vOffset = 0; // The game has crashed due to vOffset not being set. Setting it here is a temporary measure.
            }
            
            projX += vOffset * cos(degtorad(weaponObj.image_angle+90));
            projY += vOffset * -sin(degtorad(weaponObj.image_angle+90));
            
            // Spawn projectile
            var projectile = instance_create(projX, projY, obj_projectile_player);
            projectile.direction = point_direction(projX, projY, mouse_x, mouse_y);
            projectile.direction += random_range(-1.5, 1.5); // Randomize angle of fire slightly
            projectile.damage = attackDamage;
            projectile.isEnemyProjectile = false;
            projectile.image_angle = projectile.direction;     // Set direction immediately, otherwise it's not overridden 
                                                    // based on direction until 2nd projectile step.
            
            scr_create_explosion(projX, projY, 'Muzzle');
            
            // Start kickback
            scr_entity_weaponKickback_Start();
            
            // Knock player back in opposite direction of weapon angle
            x += shootKnockback * cos(degtorad(weaponObj.image_angle+180));
            y += shootKnockback * -sin(degtorad(weaponObj.image_angle+180));
            
            attackRateCounter = 0;
            
            // Spit out a shell casing
            // For now, just start the casing at the weapon offset
            var casingX = x + weaponXOffset + weaponKickbackOffsetX;
            var casingY = y + weaponYOffset + weaponKickbackOffsetY;
            
            casing = instance_create(casingX, casingY, obj_shellCasing_cucoon);
            casing.direction = projectile.direction + random_range(115, 125);

            // Testing screen shake (not working at the moment)
            //scr_screenShake(0, 500);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Weapon Kickback Reduce</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Shrink weapon kickback amount
if (weaponKickback &gt; 0) {
    weaponKickback -= weaponKickbackResetSpeed * global.deltaTime;
    clamp(weaponKickback, 0, weaponKickbackMax);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Weapon Position</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (weaponObj != noone and instance_exists(weaponObj)) {
    weaponObj.x = x + weaponXOffset + weaponKickbackOffsetX;
    weaponObj.y = y + weaponYOffset + weaponKickbackOffsetY;
    weaponObj.image_angle = point_direction(weaponObj.x, weaponObj.y, mouse_x, mouse_y);
    weaponObj.depth = depth -1 
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Code for holding "X' key to leave level</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if(keyboard_check(ord('X'))) {
    xKeyHeld = 1;
}
else {
    xKeyHeld = 0;
    xKeyHeldCounter = 0;
}
if(xKeyHeld = 1)
    xKeyHeldCounter++;
if(xKeyHeldCounter == 90) {
    if (global.state == "Paused") {
        return 0;
    }
        
    if(distance_to_object(obj_ship) &lt;= global.messageDistance) {
        if(global.energy &gt;= global.maxFuel) {
            scr_energy_change(global.maxFuel*-1);
            scr_fuel_change(100);
            global.currentLevelComplete = 1;
            
            switch(room) {
                case rm_level_moon:
                    global.moonLevelComplete = 1;
                    break;
                case rm_level_forest:
                    global.forestLevelComplete = 1;
                    break;
                case rm_level_desert:
                    global.desertLevelComplete = 1;
                    break;
                case rm_level_ice:
                    global.iceLevelComplete = 1;
                    break;
                case rm_level_underwater:
                    global.waterLevelComplete = 1;
                    break;
            }
        }
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Code for controlling death</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt;= room_height || currHealth &lt;= 0){
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability Cooldown Times</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (abilA_cooldownCounter &lt; abilA_cooldownTime) {
    abilA_cooldownCounter += global.deltaTime;
}

if (abilB_cooldownCounter &lt; abilB_cooldownTime) {
    abilB_cooldownCounter += global.deltaTime;
}

if (abilC_cooldownCounter &lt; abilC_cooldownTime) {
    abilC_cooldownCounter += global.deltaTime;
}

if (abilD_cooldownCounter &lt; abilD_cooldownTime) {
    abilD_cooldownCounter += global.deltaTime;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destroyed Building Spawners</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var nearestBuilding = scr_misc_gearNearestObjectOfType(0, obj_fallenBuilding);

with (obj_fallenBuilding) {
    disabled = true;
}

if (is_undefined(nearestBuilding) == false &amp;&amp; nearestBuilding != noone) {
    with (nearestBuilding) {
        disabled = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (global.plrAbilityAttained[0]) {
    if (abilA_cooldownCounter &lt; abilA_cooldownTime) {
        return 0;
    } else {
        abilA_cooldownCounter = 0;
    }
    
    // todo Code
    show_debug_message("IMPLEMENT ABILITY #1")
} else {
    scr_misc_notification("Ability #1 has not been unlocked.", c_black, c_yellow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if (global.state == "Paused") {
    return 0;
}

if(distance_to_object(obj_ship) &lt;= global.messageDistance) {
    if(global.energy &gt;= global.maxFuel) {
        scr_energy_change(global.maxFuel*-1);
        scr_fuel_change(100);
        global.currentLevelComplete = 1;
        
        switch(room) {
            case rm_level_moon:
                global.moonLevelComplete = 1;
                break;
            case rm_level_forest:
                global.forestLevelComplete = 1;
                break;
            case rm_level_desert:
                global.desertLevelComplete = 1;
                break;
            case rm_level_ice:
                global.iceLevelComplete = 1;
                break;
            case rm_level_underwater:
                global.waterLevelComplete = 1;
                break;
        }
    }
}
*/    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

scr_entity_jump();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability 4 - Cats &amp; Dogs</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Ability - Cats &amp; Dogs

if (global.plrAbilityAttained[3]) {
    if (abilD_cooldownCounter &lt; abilD_cooldownTime) {
        return 0;
    } else {
        abilD_cooldownCounter = 0;
    }
    
    // NO CHECK DONE FOR UPGRADED ABILITY AS NONE EXISTED
    // AT THE TIME OF IMPLEMENTATION
    var numToSpawn = irandom_range(100, 200);
    
    for (var i = 0 ; i &lt; numToSpawn ; i++) {
        var randX = irandom_range(64, room_width - 64);
        var randY = irandom_range(-64, -room_height * 2);
        instance_create(randX, randY, obj_projectile_flamingAnimal);
    }
    
    instance_create(0, 256, obj_flameScreen);
} else {
    scr_misc_notification("Ability #4 has not been unlocked.", c_black, c_yellow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability 2 - Snakes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Ability - Snakes

// Determine Proper Cooldown Time:
if (global.plrAbilityUpgraded[1]) {
    abilC_cooldownTime = global.plrAbilityCooldown_upgraded[1];
} else {
    abilC_cooldownTime = global.plrAbilityCooldown_normal[1];
}

if (global.plrAbilityAttained[1]) {
    if (abilB_cooldownCounter &lt; abilB_cooldownTime) {
        return 0;
    } else {
        abilB_cooldownCounter = 0;
    }
    
    if (global.plrAbilityUpgraded[2]) {
        audio_play_sound(snd_snakes, 0, false);
        audio_sound_gain(snd_snakes, 0.75, 0);
        for (var i = 0 ; i &lt; 12 ; i++) {
            instance_create(x, y - 72, obj_snake);
        }
    } else {
        audio_play_sound(snd_snakes, 0, false);
        audio_sound_gain(snd_snakes, 1, 0);
        for (var i = 0 ; i &lt; 8 ; i++) {
            instance_create(x, y - 72, obj_snake);
        }
    }
} else {
    scr_misc_notification("Ability #2 has not been unlocked.", c_black, c_yellow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mount/Dismount RT-6100</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (distance_to_object(obj_tower_RT6100) &lt;= sprite_width * 2 &amp;&amp; obj_tower_RT6100.warmUpRemaining == 0) {
    // Delete Weapon &amp; Deactivate Player:
    with (weaponObj) {
        instance_destroy();
    }
    
    instance_deactivate_object(self);
    
    // Allow tower to fire:
    obj_tower_RT6100.alarm[2] = room_speed;
    
    // Change stats:
    scr_state_setNormal();
    
    // Tell camera to follow RT-6100 (player now deactivated)
    scr_camera_follow_targetObject(obj_tower_RT6100);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability 3 - Extreme Blaster</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Ability - Extreme Blaster

// Determine Proper Cooldown Time:
if (global.plrAbilityUpgraded[2]) {
    abilC_cooldownTime = global.plrAbilityCooldown_upgraded[2];
} else {
    abilC_cooldownTime = global.plrAbilityCooldown_normal[2];
}

if (global.plrAbilityAttained[2]) {
    if (abilC_cooldownCounter &lt; abilC_cooldownTime) {
        return 0;
    } else {
        abilC_cooldownCounter = 0;
    }
    
    if (global.plrAbilityUpgraded[2]) {
        scr_abilC_upgraded_enable();
        audio_play_sound(snd_blaster, 0, false);
        audio_sound_gain(snd_blaster, 0.6, 0);
    } else {
        scr_abilC_normal_enable();
        audio_play_sound(snd_blaster, 0, false);
        audio_sound_gain(snd_blaster, 1, 0);
    }
} else {
    scr_misc_notification("Ability #3 has not been unlocked.", c_black, c_yellow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability 1 - ForceField Pulse</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Determine Proper Cooldown Time:
if (global.plrAbilityUpgraded[0]) {
    abilA_cooldownTime = global.plrAbilityCooldown_upgraded[0];
} else {
    abilA_cooldownTime = global.plrAbilityCooldown_normal[0];
}

if (global.plrAbilityAttained[0]) {
    if (abilA_cooldownCounter &lt; abilA_cooldownTime) {
        return 0;
    } else {
        abilA_cooldownCounter = 0;
    }
    
    if (global.plrAbilityUpgraded[0]) {
        audio_play_sound(snd_forceField, 0, false);
        audio_sound_gain(snd_forceField, 0.4, 0);
        ability = instance_create(x, y, obj_forceField);
        ability.isUpgraded = true;
    } else {
        audio_play_sound(snd_forceField, 0, false);
        audio_sound_gain(snd_forceField, 1, 0);
        ability = instance_create(x, y, obj_forceField);
        ability.isUpgraded = false;
    }
} else {
    scr_misc_notification("Ability #1 has not been unlocked.", c_black, c_yellow);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
