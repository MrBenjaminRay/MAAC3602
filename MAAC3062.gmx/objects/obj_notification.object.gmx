<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sprite index is set when created by scr_notification

// This will be decremented every time a new notification is added.

global.lastNotificationDepth += 1; // Every new one is 1 level more deep
depth = global.lastNotificationDepth; // Set depth

if (instance_number(obj_notificationBackground) == 0) {
    // Spawn the background if it doesn't already exist
    // Only background behind one or many notifications
    instance_create(0, 0, obj_notificationBackground);
}

btnSprite = noone;

// Positions of sprite and buttons be updated in STEP event, as we don't know how 
// big the sprite will be when this object is created (it is set in the script 
// after creation), and the button location is based on the size of the sprite.
btnX = 0;
btnY = 0; 

btnOffsetY = 0;

btnScale = 1;

// Hidden by default. Will be set to visible in step code
// if this has the least depth of any other notifications.
visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Set Positions</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set position on screen
x = global.screenWidth / 2 - sprite_width / 2;
y = global.screenHeight / 2 - sprite_height / 2;

// Set to visible when this is the least deep notification
var deepestDepth = 100000; // Start with crazy deep value
for (var i=0; i&lt;instance_number(obj_notification); i++) {
    var inst = instance_find(obj_notification, i);
    if (inst.depth &lt; deepestDepth) {
        deepestDepth = inst.depth;
    }
}
if (depth == deepestDepth) {
    visible = true;
}

// Set button position (below the sprite)
btnX = global.screenWidth / 2 - btnScale * sprite_get_width(btnSprite)/2;
btnY = y + sprite_height + btnOffsetY;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If this is the obj_notification with the lowest depth, 
// and the player has clicked within the expected button coordinates,
// close this modal.

clicked = point_in_rectangle(
            window_mouse_get_x(), 
            window_mouse_get_y(), 
            btnX,
            btnY,
            btnX + btnScale * sprite_get_width(btnSprite),
            btnY + btnScale * sprite_get_height(btnSprite)
        )

if (clicked &amp;&amp; visible) {
    // Player clicked in expected button area and this is the notification
    // closest to the screen, so this needs to be closed.

    // First, if there are no other modals, destroy obj_notificationBackground
    if (instance_number(obj_notification) == 1) {
        with (obj_notificationBackground) {
            instance_destroy();
        }
    }
    
    instance_destroy();

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw
draw_self();

// Draw the button so it appears in front
draw_sprite_ext(btnSprite, 0, btnX, btnY, btnScale, btnScale, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw in Draw GUI Instead</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
