<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ForceField_Single</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_effect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>radius_begin = 0;       // The beginning radius.
radius_end = 256;       // The resulting radius.
radius_current = 0;     // The current radius;
radius_const = .35;      // The amount by which the radius increases every step (with delta time).

knockback_speed = 0.8;  // Speed at which to send enemies when knocking back
upgrade_ratio = 1.3;    // The amount by which to increase the radius when upgraded
isUpgraded = false;     // Whether or not the ability is upgraded (affects radius &amp; speed)
multiplier = 1;         // Use this to upgrade radius and knockback speed
                        // 1 by default, or upgrade_ratio when upgraded 
knockback_multiplier_boss = 0.5; // Half knockback for bosses

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Crank up multiplier to upgrade_ratio when ability is upgraded
if (isUpgraded) {
    multiplier = upgrade_ratio;
}

if (radius_current &gt;= radius_end * multiplier) {
    instance_destroy();
}

// Ability center follows player center (player sprite is centered for the most part)
if (instance_exists(obj_player)) {
    x = obj_player.x;
    y = obj_player.y;
}

// Expand Radius:
radius_current += radius_const * global.deltaTime;

// Push Back Enemies:
for (var i = 0 ; i &lt; instance_number(obj_enemy) ; i++) {
    var tmpEnem = instance_find(obj_enemy, i);
    var tmpDist = point_distance(x, y, tmpEnem.x + tmpEnem.sprite_width/2, tmpEnem.y + tmpEnem.sprite_height/2);

    if (tmpDist &lt;= radius_current) {
        var angle = point_direction(x, y, tmpEnem.x, tmpEnem.y);
        tmpEnem.direction = angle;
        var isBoss = scr_entity_isObjectBoss(tmpEnem);
        
        if (isBoss) {
            // Slower knockback speed for all bosses
            tmpEnem.speed = knockback_speed * multiplier * knockback_multiplier_boss;
        } else {
            // Regular knockback speed for all non-bosses
            tmpEnem.speed = knockback_speed * multiplier;        
        }
        
        // Allow enemies to pass through platforms above them when being knocked back
        tmpEnem.isJumping = true;
        
        // Deal damage in upgraded version of ability
        if (isUpgraded) {
            if (isBoss) {
                // Deal 5% of max damage to all bosses
                scr_entity_dealDamage(tmpEnem, tmpEnem.maxHealth * .05);
            } else {
                // Deal 25% of max damage to all non-bosses
                scr_entity_dealDamage(tmpEnem, tmpEnem.maxHealth * .25);
            }
        }
        
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_forceField</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(64);
draw_set_alpha(0.25);
draw_circle_colour(x, y, radius_current*random_range(.70, .85), c_blue, c_blue, false);
draw_set_circle_precision(8);

draw_set_circle_precision(64);
draw_set_alpha(0.25);
draw_circle_colour(x, y, radius_current*random_range(.4, .6), c_blue, c_blue, false);
draw_set_circle_precision(8);

draw_set_circle_precision(64);
draw_set_alpha(0.25);
draw_circle_colour(x, y, radius_current*random_range(.2,.3), c_blue, c_blue, false);
draw_set_circle_precision(8);

var scale = (radius_current / radius_end) * (radius_end / (sprite_get_width(spr_ForceField_Single) / 2));
draw_sprite_ext(spr_ForceField_Single, 0, x, y, scale, scale, 0, c_white, .75);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
