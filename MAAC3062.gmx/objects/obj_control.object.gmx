<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

// Store screen dimensions
global.screenWidth = display_get_width();
global.screenHeight = display_get_height();
global.screenRatio = global.screenWidth / global.screenHeight;

global.messageDistance = 120; // distance the player can be from a distanceMessageBox
                                // before it disappears.
global.messageScale = 0.4; // The scale of message boxes and text sprites

global.canWarp = false;

global.deltaTime = delta_time;

/* States:
 *      Normal
 *      Build
 *      Destroy
 *      Paused
 */
global.state = "Normal";

global.minerals = 0;
global.energy = 1000; // The current energy collected by the player during the level.
global.fuel = 0; // Max fuel is 100.
global.maxFuel = 0; // At the beginning of each level, this value is set to the target fuel level.
global.currentLevelComplete = 0; // used to make sure that player doesn't lose level
                                 // because of death during the level complete
                                 // animation/sequence
global.moonLevelComplete = 1;
global.forestLevelComplete = 0;
global.desertLevelComplete = 0;
global.iceLevelComplete = 0;
global.waterLevelComplete = 0;


global.caterpillagerUnlock = 1;
global.slothRopeUnlock = 1;
global.titMouseUnlock = 1;
global.fireAntUnlock = 0;
global.CalibearUnlock = 0;
global.RT6100Unlock = 0;
global.mechaGoatUnlock = 0;
global.armadilloUnlock = 0;
global.porpoiseUnlock = 0;
global.gorillaUnlock = 0;
global.electricEelUnlock = 0;

global.fieldPulseUnlock = 0;
global.sneakySnakesUnlock = 0;
global.blasterUnlock = 0;
global.catsAndDogsUnlock = 0;

// Format:
//      Name
//      Cost (Energy)
//      Object
//      Range
//      WeaponXOffset
//      WeaponYOffset

global.towers[0, 0] = "Basic Tower";
global.towers[0, 1] = 300;
global.towers[0, 2] = obj_tower_basic;
global.towers[0, 3] = spr_tower_basic;
global.towers[0, 4] = 230; // sprite_get_width(global.towers[0, 3]) * 2.8;
global.towers[0, 5] = sprite_get_width(global.towers[0, 3]) / 2;
global.towers[0, 6] = 32;
global.towers[0, 7] = 200;

global.towers[1, 0] = "Super Freezer";
global.towers[1, 1] = 750;
global.towers[1, 2] = obj_tower_superFreezer;
global.towers[1, 3] = spr_tower_superFreezer;
global.towers[1, 4] = 400; // sprite_get_width(global.towers[1, 3]) * 4;
global.towers[1, 5] = sprite_get_width(global.towers[1, 3]) / 2;
global.towers[1, 6] = 32;
global.towers[1, 7] = 200;

global.towers[2, 0] = "Tactical Moartar";
global.towers[2, 1] = 1000;
global.towers[2, 2] = obj_tower_tacticalMortar;
global.towers[2, 3] = spr_tower_tacticalMortar;
global.towers[2, 4] = view_wview[0] * 0.9;
global.towers[2, 5] = (sprite_get_width(global.towers[2, 3]) / 2) - 16;
global.towers[2, 6] = 32;
global.towers[2, 7] = 200;

global.towers[3, 0] = "109 Cal Rifle";
global.towers[3, 1] = 750;
global.towers[3, 2] = obj_tower_109CalRifle;
global.towers[3, 3] = spr_tower_rifle;
global.towers[3, 4] = 600; // sprite_get_width(global.towers[3, 3]) * 6;
global.towers[3, 5] = sprite_get_width(global.towers[3, 3]) / 2;
global.towers[3, 6] = 32;
global.towers[3, 7] = 200;

global.towers[4, 0] = "Flame Thrower";
global.towers[4, 1] = 1500;
global.towers[4, 2] = obj_tower_flameThrower;
global.towers[4, 3] = spr_tower_flamethrower;
global.towers[4, 4] = 130; // sprite_get_width(global.towers[4, 3]);
global.towers[4, 5] = sprite_get_width(global.towers[4, 3]) / 2;
global.towers[4, 6] = 32;
global.towers[4, 7] = 200;

global.towers[5, 0] = "M-6100";
global.towers[5, 1] = 2000;
global.towers[5, 2] = obj_tower_m6100;
global.towers[5, 3] = spr_tower_m6100;
global.towers[5, 4] = 400;
global.towers[5, 5] = sprite_get_width(global.towers[5, 3]) / 2;
global.towers[5, 6] = sprite_get_height(global.towers[5, 3]) / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.deltaTime = (delta_time) / 1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
