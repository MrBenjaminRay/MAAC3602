<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_cntrl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
draw_set_colour(c_white);
global.messageBoxAnimSpeed = 0.20;

// Store screen dimensions
global.screenWidth = display_get_width();
global.screenHeight = display_get_height();
global.screenRatio = global.screenWidth / global.screenHeight;

// Store some mouse stuff so that it's available every step (and only checked once per step)
// Mouse position relative to the window (window_mouse_get_x/window_mouse_get_y)
global.window_mouse_x = 0;
global.window_mouse_y = 0;
// Mouse position relative to the view (window_view_mouse_get_x/window_view_mouse_get_y)
global.view_mouse_x = 0;
global.view_mouse_y = 0;
// Mouse position relative to the room (mouse_x/mouse_y)
global.room_mouse_x = 0;
global.room_mouse_y = 0;

global.messageDistance = 128; // distance the player can be from a distanceMessageBox
                                // before it disappears.
global.messageScale = 0.4; // The scale of message boxes and text sprites

global.canWarp = false;

global.deltaTime = delta_time;

/* States:
 *      Normal
 *      Build
 *      Destroy
 *      Paused
 */
global.state = "Normal";

global.minerals = 0;
global.energy = 1000; // The current energy collected by the player during the level.
global.fuel = 0; // Max fuel is 100.
global.maxFuel = 0; // At the beginning of each level, this value is set to the target fuel level.
global.distanceFromShipToPlayer = -1;
global.currentLevelComplete = 0; // used to make sure that player doesn't lose level
                                 // because of death during the level complete
                                 // animation/sequence
                                 
global.moonLevelComplete = 1;
global.forestLevelComplete = 1;
global.desertLevelComplete = 1;
global.iceLevelComplete = 1;
global.waterLevelComplete = 0;

// Tower and ability is unlocked
// NOTE: You can use scr_tower_checkUnlockByTowerIndex() to check unlock variable by tower index (0-5)

global.caterpillagerUnlock = 1;
global.slothRopeUnlock = 1;
global.titMouseUnlock = 1;
global.CalibearUnlock = 0;
global.fireAntUnlock = 0;
global.RT6100Unlock = 0;
global.mechaGoatUnlock = 0;
global.armadilloUnlock = 0;
global.porpoiseUnlock = 0;
global.gorillaUnlock = 0;
global.electricEelUnlock = 0;

global.fieldPulseUnlock = 0;
global.sneakySnakesUnlock = 0;
global.blasterUnlock = 0;
global.catsAndDogsUnlock = 0;

// Tower unlock costs

global.caterpillagerUnlockCost = 1;
global.slothRopeUnlockCost = 2000;
global.titMouseUnlockCost = 3000;
global.CalibearUnlockCost = 3000;
global.fireAntUnlockCost = 5000;
global.RT6100UnlockCost = 10000;
global.mechaGoatUnlockCost = 474747;
global.armadilloUnlockCost = 5000;
global.porpoiseUnlockCost = 6000;
global.gorillaUnlockCost = 5000;
global.electricEelUnlockCost = 7500;

// Tower and ability upgrade costs

global.caterpillagerUpgradeCost = 1500;
global.slothRopeUpgradeCost = 2500;
global.titMouseUpgradeCost = 5000;
global.fireAntUpgradeCost = 3500;
global.CalibearUpgradeCost = 3000;
global.RT6100UpgradeCost = 6000;
global.mechaGoatUpgradeCost = 696969;
global.armadilloUpgradeCost = 4500;
global.porpoiseUpgradeCost = 3500;
global.gorillaUpgradeCost = 3000;
global.electricEelUpgradeCost = 3000;

global.fieldPulseUpgradeCost = 2000;
global.sneakySnakesUpgradeCost = 2000;
global.blasterUpgradeCost = 5000;
global.catsAndDogsUpgradeCost = 10000;

// Format:
//      Name
//      Cost (Energy)
//      Object
//      Range
//      WeaponXOffset
//      WeaponYOffset
//      ????? No clue what this is for
//      Placement distance. The distance from the player to placement location, in pixels.
//      List of strings to display on tower placement.

global.towers[0, 0] = "CaterPillager";
global.towers[0, 1] = 300;
global.towers[0, 2] = obj_tower_caterpillager;
global.towers[0, 3] = spr_tower_caterpillager;
global.towers[0, 4] = 230; // sprite_get_width(global.towers[0, 3]) * 2.8;
global.towers[0, 5] = sprite_get_width(global.towers[0, 3]) / 2;
global.towers[0, 6] = 32;
global.towers[0, 7] = 200;
global.towers[0, 8] = 256;
global.towers[0, 9] = ds_list_create();
ds_list_add(global.towers[0, 9], global.towers[0, 0]);
ds_list_add(global.towers[0, 9], "Damage: Low-Medium");
ds_list_add(global.towers[0, 9], "Fire Rate: Medium");
ds_list_add(global.towers[0, 9], "Range: Medium");
ds_list_add(global.towers[0, 9], "Armor: Low-Medium");
ds_list_add(global.towers[0, 9], "Costs " + string(global.towers[0, 1]) + " Energy");

global.towers[1, 0] = "Sloth On a Rope";
global.towers[1, 1] = 750;
global.towers[1, 2] = obj_tower_slothOnRope;
global.towers[1, 3] = spr_tower_slothOnRope;
global.towers[1, 4] = 400; // sprite_get_width(global.towers[1, 3]) * 4;
global.towers[1, 5] = sprite_get_width(global.towers[1, 3]) / 2;
global.towers[1, 6] = 32;
global.towers[1, 7] = 200;
global.towers[1, 8] = 256;
global.towers[1, 9] = ds_list_create();
ds_list_add(global.towers[1, 9], global.towers[1, 0]);
ds_list_add(global.towers[1, 9], "Fire Rate: High");
ds_list_add(global.towers[1, 9], "Range: Medium-High");
ds_list_add(global.towers[1, 9], "Armor: High");
ds_list_add(global.towers[1, 9], "Costs " + string(global.towers[1, 1]) + " Energy");

global.towers[2, 0] = "Tactical Titmouse";
global.towers[2, 1] = 1000;
global.towers[2, 2] = obj_tower_tacticalTitmouse;
global.towers[2, 3] = spr_tower_tacticalTitmouse;
global.towers[2, 4] = view_wview[0] * 0.9;
global.towers[2, 5] = (sprite_get_width(global.towers[2, 3]) / 2) - 16;
global.towers[2, 6] = 32;
global.towers[2, 7] = 200;
global.towers[2, 8] = 256;
global.towers[2, 9] = ds_list_create();
ds_list_add(global.towers[2, 9], global.towers[2, 0]);
ds_list_add(global.towers[2, 9], "Damage: Low-Medium");
ds_list_add(global.towers[2, 9], "Fire Rate: Low-Medium");
ds_list_add(global.towers[2, 9], "Range: High");
ds_list_add(global.towers[2, 9], "Armor: Very Low");
ds_list_add(global.towers[2, 9], "Costs " + string(global.towers[2, 1]) + " Energy");

global.towers[3, 0] = "109 Cali-Bear Rifle";
global.towers[3, 1] = 750;
global.towers[3, 2] = obj_tower_109CaliBear;
global.towers[3, 3] = spr_tower_109CaliBear;
global.towers[3, 4] = 600; // sprite_get_width(global.towers[3, 3]) * 6;
global.towers[3, 5] = sprite_get_width(global.towers[3, 3]) / 2;
global.towers[3, 6] = 32;
global.towers[3, 7] = 200;
global.towers[3, 8] = 256;
global.towers[3, 9] = ds_list_create();
ds_list_add(global.towers[3, 9], global.towers[3, 0]);
ds_list_add(global.towers[3, 9], "Damage: Low-Medium");
ds_list_add(global.towers[3, 9], "Fire Rate: Low");
ds_list_add(global.towers[3, 9], "Range: High");
ds_list_add(global.towers[3, 9], "Armor: Medium");
ds_list_add(global.towers[3, 9], "Costs " + string(global.towers[3, 1]) + " Energy");

global.towers[4, 0] = "FireAnt Hose";
global.towers[4, 1] = 1500;
global.towers[4, 2] = obj_tower_fireAnt;
global.towers[4, 3] = spr_tower_fireAnt;
global.towers[4, 4] = 130; // sprite_get_width(global.towers[4, 3]);
global.towers[4, 5] = sprite_get_width(global.towers[4, 3]) / 2;
global.towers[4, 6] = 32;
global.towers[4, 7] = 200;
global.towers[4, 8] = 256;
global.towers[4, 9] = ds_list_create();
ds_list_add(global.towers[4, 9], global.towers[4, 0]);
ds_list_add(global.towers[4, 9], "Damage: Medium");
ds_list_add(global.towers[4, 9], "Fire Rate: High");
ds_list_add(global.towers[4, 9], "Range: Low");
ds_list_add(global.towers[4, 9], "Armor: High");
ds_list_add(global.towers[4, 9], "Costs " + string(global.towers[4, 1]) + " Energy");

global.towers[5, 0] = "RT-6100";
global.towers[5, 1] = 2000;
global.towers[5, 2] = obj_tower_RT6100;
global.towers[5, 3] = spr_tower_RT6100;
global.towers[5, 4] = 400;
global.towers[5, 5] = sprite_get_width(global.towers[5, 3]) / 2;
global.towers[5, 6] = sprite_get_height(global.towers[5, 3]) / 2;
global.towers[5, 7] = 200;
global.towers[5, 8] = 256;
global.towers[5, 9] = ds_list_create();
ds_list_add(global.towers[5, 9], global.towers[5, 0]);
ds_list_add(global.towers[5, 9], "Damage: High");
ds_list_add(global.towers[5, 9], "Fire Rate: High");
ds_list_add(global.towers[5, 9], "Range: High");
ds_list_add(global.towers[5, 9], "Armor: High");
ds_list_add(global.towers[5, 9], "Costs " + string(global.towers[5, 1]) + " Energy");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update delta time global variable
global.deltaTime = (delta_time) / 1000;

// Update mouse position global variables
// Mouse position relative to the window (window_mouse_get_x/window_mouse_get_y)
global.window_mouse_x = window_mouse_get_x();
global.window_mouse_y = window_mouse_get_y();
// Mouse position relative to the view (window_view_mouse_get_x/window_view_mouse_get_y)
global.view_mouse_x = window_view_mouse_get_x(0);
global.view_mouse_y = window_view_mouse_get_y(0);
// Mouse position relative to the room (mouse_x/mouse_y)
global.room_mouse_x = mouse_x;
global.room_mouse_y = mouse_y;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
