<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hotbar_item_back</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>towerIndex = 0; // Corresponds to the index in global.towers for the 
                // tower associated with this hotbar item.
                // Key for tower assumed to be towerIndex+1 (e.g. first one is 1)
                // Must be set by creator (obj_hud_hotbar) after this is created

keyNumberOffset_x = 4; // x offset from hotbar item when drawing hotkey number
keyNumberOffset_y = 2; // y offset from hotbar item when drawing hotkey number

textShadowOffset_x = 2; // x offset from hotkey number when drawing shadow
textShadowOffset_y = 2; // y offset from hotkey number when drawing shadow

enabled = false;    // Whether or not this tower is currently enabled. Updated in step code.
selected = false;   // Whether or not this tower is currently being placed. Updated in step code.
hover = false;      // Whether or not the mouse is currently hovered over this hotbar item. Updated in step code.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check if this thing is enabled or not
if (scr_tower_checkUnlockByTowerIndex(towerIndex)) {
    // This is unlocked
    enabled = true;
} else {
    // This tower is not unlocked
    enabled = false;
}

// Set selected to false by default, and override below if actually selected
selected = false;

// Check if this thing is selected (actively being placed) or not
// by getting reference to build state control object (if exists)
if (instance_exists(obj_control_buildState)) {
    // It exists, so get reference to it
    var buildCont = obj_control_buildState;

    // Set selected flag if tower being built matches this tower's index
    if (buildCont.towerIndex == towerIndex) {
        selected = true;
    }
}


// Is cursor over this item?
if (
    point_in_rectangle(
        global.window_mouse_x,
        global.window_mouse_y,
        x + 1, // Ignore left-most pixel as slots overlap by 1 pixel
        y,
        x + sprite_width - 1, // Ignore right-most pixel as slots overlap by 1 pixel
        y + sprite_height
    )
) {
    hover = true;
} else {
    hover = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

// Draw selected overlay when tower of this type is being placed. This overlay
// covers the background but sits behind the hotkey and icon.
if (selected) {
    draw_sprite(spr_hotbar_item_selectedOverlay, 0, x, y);
}

if (enabled) {
    // Draw the tower sprite - it sits behind everything else, so draw it early
    var towerSprite = global.towers[towerIndex, 3];
    var towerScale = .35;
    var towerOffset_x = (sprite_width - sprite_get_width(towerSprite)*towerScale)/2;
    var towerOffset_y = (sprite_height - sprite_get_height(towerSprite)*towerScale)/2;
    draw_sprite_ext(towerSprite, 0, x+towerOffset_x, y+towerOffset_y, towerScale, towerScale, 0, c_white, 1);
    
    
    // Set the font for the hotkey number
    draw_set_font(fnt_hud_hotbar_hotkey);
    
    // Draw hotkey number shadow
    draw_set_colour(c_black);
    draw_set_alpha(0.5);
    draw_text(
        x + keyNumberOffset_x + textShadowOffset_x,
        y + keyNumberOffset_y + textShadowOffset_y,
        towerIndex + 1
    );
    
    // Draw hotkey number
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text(
        x + keyNumberOffset_x,
        y + keyNumberOffset_y,
        towerIndex + 1
    );

} else {

    // Draw disabled overlay when not enabled. This overlay covers everything.

    // Draw the disabled overlay
    draw_sprite(spr_hotbar_item_disabledOverlay, 0, x, y);
    // Draw the padlock centered, smaller, and faded
    var lockScale = .85;
    var lockOffset_x = (sprite_width - sprite_get_width(spr_locked)*lockScale)/2;
    var lockOffset_y = (sprite_height - sprite_get_height(spr_locked)*lockScale)/2;
    draw_sprite_ext(spr_locked, 0, x+lockOffset_x, y+lockOffset_y, lockScale, lockScale, 0, c_white, .15);
}

if (hover) {
    // Draw name of tower or generic text if locked
    var text;
    if (enabled) {
        text = global.towers[towerIndex, 0];
    } else {
        text = 'Locked Tower';
    }
    
    draw_set_halign(fa_middle); // Center-align text so we don't have to calculate its width
    draw_set_colour(c_white);
    draw_set_alpha(1);
    draw_text(
        x + sprite_width/2, // Center drawing point
        y -20,
        text
    );
    // Reset drawing alignment so we don't screw up other stuff drawn after this
    draw_set_halign(fa_left);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Prevent drawing here as this object is drawn in Draw GUI event
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
