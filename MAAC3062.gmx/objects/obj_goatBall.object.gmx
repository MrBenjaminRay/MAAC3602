<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_goat_ball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-19</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>projectileHitGain = 0.4;    // gain value for the projectileHit sounds.

image_xscale = 0.75;
image_yscale = 0.75;

detDelay = 0;   // Detonation delay after creation (set by script)

speed_x = 0;    // x speed (set by script)
speed_y = 0;    // y speed (set by script)
gravConst = 0.00035;

image_angle = random_range(0, 359);
rotate_speed = random_range(5, 12); // Will be negated when flying to the left
rotate_speed_reduction = 0.98;
rotate_speed_min = 0.1; // When abs(rotation_speed) speed below this point, set it to 0

damage = 60;    // Tweak as needed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_projectileHit_medium, 0, false);
audio_sound_gain(snd_projectileHit_medium, projectileHitGain, 0);

scr_create_explosion(x, y, "Enemy_Large");

// Hit all enemies in immediate range of goat ball
var range = 150;

for (i = 0 ; i &lt; instance_number(obj_enemy) ; i++) {
    var tmpEnem = instance_find(obj_enemy, i);
    var tmpDist = distance_to_object(tmpEnem);
    
    if (tmpDist &lt;= range) {        
        scr_entity_dealDamage(tmpEnem, damage);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check if game is paused
if (os_is_paused()) {
    show_debug_message('PAUSED - Skipping a step event. Might prevent death on pause!');
    return 0;
}

if (global.state == "Paused") {
    return 0;
}

if (detDelay &lt;= 0) {
    instance_destroy();
    return 0;
} else {
    detDelay -= global.deltaTime;
}

// Rotate ball
if (speed_x &gt; 0) {
    // Traveling right
    if (rotate_speed &gt; 0) {
        rotate_speed *= -1;
    }
} else {
    // Traveling left
    if (rotate_speed &lt; 0) {
        rotate_speed *= -1;
    }
}
if (abs(rotate_speed) &gt; rotate_speed_min) {
    rotate_speed *= rotate_speed_reduction;
} else {
    rotate_speed = 0;
}
image_angle += rotate_speed;


// Check if ball not rising/falling is colliding at start of step.
// Would be due to sprite rotation or something like that.
//if (place_meeting(x, y, obj_physicsTile) &amp;&amp; speed_y == 0) {
//    while (place_meeting(x, y, obj_physicsTile)) {
//        y--;
//    }
//}

// Increment gravity if not sitting on a tile
//if (!place_meeting(x, y+1, obj_physicsTile)) {
    speed_y += gravConst * global.deltaTime;
//}

var newY = y + speed_y * global.deltaTime;

if (!place_meeting(x, y, obj_physicsTile) &amp;&amp; place_meeting(x, newY, obj_physicsTile) &amp;&amp; speed_y &gt; 0) {
    // Colliding on the way down. Last y position (y) didn't collide, and
    // new y position (newY) does collide.
    while (place_meeting(x, newY, obj_physicsTile)) {
        newY--;
    }

    // Kill vertical speed
    //speed_y = 0;
    // Bounce vertically
    speed_y *= -.35;
    rotate_speed *= .5;
    speed_x *= .5;
}

if (abs(speed_y) &lt; 0.01) {
    //speed_y = 0;
}

y = newY;


var newX = x + speed_x * global.deltaTime;

if (place_meeting(newX, y, obj_wallTile)) {
    // New X collides with wall
    while (place_meeting(newX, y, obj_wallTile)) {
        if (speed_x &gt; 0) {
            newX--;
        } else {
            newX++;
        }    
    }
    // Bounce off of wall
    speed_x *= -.9;
}

x = newX;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
