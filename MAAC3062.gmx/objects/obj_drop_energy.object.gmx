<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drop_energy_outer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>obj_drop</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Add some transparency
image_alpha = .3;

// Set scale
// NOTE: Scale of inner energy objects set in their create code
image_xscale = .75;
image_yscale = .75;

// Help remove any energy drops that are this many pixels off of the level
// in any direction. Drops also automatically expire after x seconds (see maxLife).
maxOffScreenRange = 50;

energyInnerObj1 = instance_create(x, y, obj_drop_energy_inner1); // Inner-most energy
energyInnerObj2 = instance_create(x, y, obj_drop_energy_inner2);
energyInnerObj3 = instance_create(x, y, obj_drop_energy_inner3);
energyInnerObj4 = instance_create(x, y, obj_drop_energy_inner4); // Outer-most energy
backObj = instance_create(x, y, obj_drop_energy_back); // Background (bit of darkness)

// Set depths based on this object's depth
energyInnerObj1.depth = depth + 1;
energyInnerObj2.depth = depth + 2;
energyInnerObj3.depth = depth + 3;
energyInnerObj4.depth = depth + 4;
backObj.depth = depth + 5;

// Back object has same scale as this one
backObj.image_xscale = image_xscale;
backObj.image_yscale = image_yscale

speedDecrease = 0.0002;

value = 0; // Will be overwritten when object is created

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the inner orbs if they exist
if (instance_exists(energyInnerObj1)) {
    with (energyInnerObj1) {
        instance_destroy();
    }
}
if (instance_exists(energyInnerObj2)) {
    with (energyInnerObj2) {
        instance_destroy();
    }
}
if (instance_exists(energyInnerObj3)) {
    with (energyInnerObj3) {
        instance_destroy();
    }
}
if (instance_exists(energyInnerObj4)) {
    with (energyInnerObj4) {
        instance_destroy();
    }
}
if (instance_exists(backObj)) {
    with (backObj) {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Inner energy object positions match the container position
if (instance_exists(energyInnerObj1)) {
    energyInnerObj1.x = x;
    energyInnerObj1.y = y;
}
if (instance_exists(energyInnerObj2)) {
    energyInnerObj2.x = x;
    energyInnerObj2.y = y;
}
if (instance_exists(energyInnerObj3)) {
    energyInnerObj3.x = x;
    energyInnerObj3.y = y;
}
if (instance_exists(energyInnerObj4)) {
    energyInnerObj4.x = x;
    energyInnerObj4.y = y;
}
if (instance_exists(backObj)) {
    backObj.x = x;
    backObj.y = y;
}

// If the drop is out of bounds, wipe 'er out
if (x &lt; 0-maxOffScreenRange || x &gt; room_width+maxOffScreenRange || y &lt; 0-maxOffScreenRange || y &gt; room_height+maxOffScreenRange) {
    instance_destroy();
    return 0;
}

x += hspeed * global.deltaTime;

// Speed needs to be reduced if not 0
if (hspeed &gt; 0) {
    // Is moving to the right
    var newSpeed = hspeed - speedDecrease * global.deltaTime;
    if (newSpeed &gt;= 0) {
        // New speed would still be &gt;= 0, so do it
        hspeed = newSpeed;
    } else {
        // New speed would be &lt; 0, so just set to 0
        hspeed = 0;
    }
} else if (hspeed &lt; 0) {
    // Is moving to the left
    var newSpeed = hspeed + speedDecrease * global.deltaTime;
    if (newSpeed &lt;= 0) {
        // New speed would still be &lt;= 0, so do it
        hspeed = newSpeed;
    } else {
        // New speed would be &gt; 0, so just set to 0
        hspeed = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the emitter that emits energy orbs
var inst = instance_create(x, y, obj_emitter_energy_orb);
// # of orbs emitted is based on value of energy drop (each orb adds 1 energy to level)
inst.particleCount = value;

// Play some kind of cool sound
audio_play_sound(snd_energyPickup, 0, false);
audio_sound_gain(snd_energyPickup, 0.6, 0);

// Destroy the drop
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
