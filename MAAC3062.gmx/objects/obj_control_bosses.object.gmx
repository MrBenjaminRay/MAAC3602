<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_bossControl</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Will be set in step code and represets # of kills
// required before the boss spawns on the current level.
requiredKills = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Boss Spawn Requirements:
requiredKills = 200;

switch (room) {
    case rm_level_moon: {
        requiredKills = 200;
        break;
    }
    case rm_level_forest: {
        requiredKills = 250;
        break;
    }
    case rm_level_desert: {
        requiredKills = 300;
        break;
    }
    case rm_level_ice: {
        requiredKills = 350;
        break;
    }
    case rm_level_underwater: {
        requiredKills = 400;
        break;
    }
    case rm_level_asteroid: {
        requiredKills = 450;
        break;
    }
    case rm_level_mars: {
        requiredKills = 500;
        break;
    }
    case rm_level_earth: {
        requiredKills = 550;
        break;
    }
}


var canSpawnBoss = scr_statistics_getData(28) &gt;= requiredKills;
canSpawnBoss &amp;= scr_statistics_getData(26) == false; // Check if boss has spawned

if (canSpawnBoss) {
    scr_statistics_setData(26, true);

    // Disable spawning of other enemies
    scr_spawning_disableSpawners();
    
    switch(room) {
        case rm_level_moon: {
            scr_spawnBoss(obj_enemy_boss_mini_A, 2300, 500);
            break;
        }
        case rm_level_forest: {
            scr_spawnBoss(obj_enemy_boss_mini_D, 1600, 416);
            break;
        }
        case rm_level_desert: {
            scr_spawnBoss(obj_enemy_boss_mini_C, -288, -160);
            break;
        }
        case rm_level_ice: {
            scr_spawnBoss(obj_enemy_boss_large_C, 1344, 384);
            break;
        }
        case rm_level_underwater: {
            scr_spawnBoss(obj_enemy_boss_large_B, 1408, 416);
            break;
        }
        case rm_level_asteroid: {
            scr_spawnBoss(obj_enemy_boss_large_A, 2176, 1120);
            break;
        }
        case rm_level_mars: {
            scr_spawnBoss(obj_enemy_boss_mini_B, 1600, 416);
            break;
        }
        case rm_level_earth: {
            scr_spawnBoss(obj_enemy_boss_large_D, 1600, 416);
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
