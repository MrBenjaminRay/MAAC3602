<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ANIMATION:
animationSpeed = 1;

// MOVEMENT:
movementSpeed = 150 / 1000;     // Left/Right Movement Speed
jumpSpeed = 300/ 1000;          // Jump Movement Speed
currentJumpSpeed = jumpSpeed;   // Current Jump Movement Speed
currentDropSpeed = 0;           // Current Drop Movement Speed
currentFallSpeed = 0;           // Current Fall Movement Speed
gravConst = 6 / 1000;           // Gravity Constant
isJumping = false;              // Whether or not the entity is jumping.
isDropping = false;             // Whether or not the entity is dropping to a lower platform.

// WEAPON:
attackRate = room_speed / 2;    // The number of delta time between attacks.
attackRateCounter = 0;          // The number of delta time since the last attack.
attackDamage = 10;              // The amount of damage done by each attack.
attackRange = sprite_width/2;   // The distance from the entity's origin that melee attacks can be done within.

weaponObj = noone;              // The weapon to display on the entity or noone if there isn't one.
weaponXOffset = sprite_width/2; // The x-axis position, in relation to this entity, of where to place the weapon obj.
weaponYOffset = sprite_height/2;// The y-axis position, in relation to this entity, of where to place the weapon obj.

// HEALTH &amp; SHIELDS:
currShield = 0;                 // The current sheild value.
currHealth = 100;               // The current health value.

maxShield = 0;                  // The maximum shield value.
maxHealth = 100;                // The maximum health value.

// HEALTH/SHIELD BAR:
showHealthBar = true;

healthBarXOffset = 0;
healthBarYOffset = 0;

healthBarHeight = 10;
healthBarWidth = sprite_width;

healthBarColor_background = c_black;           // The background color of the health/shield bar.
healthBarColor_healthForeground = c_lime;      // The foreground color of the health bar.
healthBarColor_shieldForeground = c_teal;      // The foreground color of the sheld bar.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the Weapon Object:
with (weaponObj) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// SPECIAL CASE:
// If the entity's y-axis coordinate is above 0, then force the entity to
// drop to a lower platform.
if (y &lt; 0) {
    scr_entity_forceDrop();
}
    

// SPECIAL CASE:
// If the entity is jumping, but the jump ends with the entity stuck inside of
// a tile, then push the entity back down.
if (!isJumping &amp;&amp; !isDropping) {
    if (currentJumpSpeed == 0) {
        while (place_meeting(x, y, obj_physicsTile)) {
            if (object_index == obj_drop_energy) {
                // Push energy drops up (they rotate and collide with tiles, so they need a boost)
                y--;
            } else {
                // Push everything else up as well
                // This was y++ as of March 10, but it was causing player to push down through
                // platforms after he jumped once, ultimately killing him underground.
                // Changing this to y-- appears to solve that issue. TylerM to review in case
                // this has unwanted consequences. -Ben on March 11 (am)
                y--;
            }
        }
    }
}

// JUMPING:
if (isJumping &amp;&amp; !isDropping) {
    currentJumpSpeed += gravConst * global.deltaTime;
    
    if (currentJumpSpeed &gt; 0) {
        currentJumpSpeed = 0;
        isJumping = false;
    } else {
        y += currentJumpSpeed;
    }
}

// DROPPING:
if (!isJumping &amp;&amp; isDropping) {
    if (currentDropSpeed == 0) {
        currentDropSpeed = movementSpeed * global.deltaTime;
    } else {
        currentDropSpeed += gravConst * global.deltaTime;
    }


    // If there is no collision at the new location, then change the drop state
    // and allow the fall code to take over:
    if (place_meeting(x, y + currentDropSpeed, obj_physicsTile) == false) {
        y += currentDropSpeed;
        isDropping = false;
        currentDropSpeed = 0;
    } else {
        y += currentDropSpeed;
     }
}

// FALLING:
if (!isJumping &amp;&amp; !isDropping) {
    if (currentFallSpeed == 0) {
        currentFallSpeed = movementSpeed * global.deltaTime;
    } else {
        currentFallSpeed += gravConst * global.deltaTime;
    }

    var collisionAtNewLocation = place_meeting(x, y + currentFallSpeed, obj_physicsTile);
    
    // If there is a collision at the new location, then do nothing and reset fall data:
    if (collisionAtNewLocation) {
        currentFallSpeed = 0;
        
        while (place_meeting(x, y + 1, obj_physicsTile) == false) {
            y++;
        }
    }
    
    // If there is no collision at the new location, then continue falling:
    if (collisionAtNewLocation == false) {
        y += currentFallSpeed;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_visualTile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isJumping) {
    isJumping = false;
    currentJumpSpeed = 0;
    y++;
} else {
    y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_physicsTile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isJumping) {
    isJumping = false;
    currentJumpSpeed = 0;
    y++;
} else {
    y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showHealthBar == false) {
    return 0;
}

// Determine initial coordinates:
var xPos_left = x + healthBarXOffset;
var yPos_top = y + healthBarYOffset;
var xPos_right = xPos_left + healthBarWidth;
var yPos_bottom = yPos_top + healthBarHeight;

// Draw Bar Background:
draw_set_color(healthBarColor_background);
draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);

// Adjust coordinates to allow a border to be shown:
var borderWidth = 2;
xPos_left += borderWidth;
yPos_top += borderWidth;
yPos_bottom -= borderWidth;

if (maxHealth &gt; 0 &amp;&amp; currHealth &gt; 0) {
    // Adjust coordinates for health percentage:
    var healthPct = currHealth / maxHealth;
    var xPos_right = xPos_left + (healthBarWidth * healthPct) - (borderWidth * 2);
    
    // Draw Health Bar:
    draw_set_color(healthBarColor_healthForeground);
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);
}


if (maxShield &gt; 0 &amp;&amp; currShield &gt; 0) {
    // Adjust coordinates for shield percentage:
    var shieldPct = currShield / maxShield;
    var xPos_right = xPos_left + (healthBarWidth * shieldPct) - (borderWidth * 2);
    
    // Draw Shield Bar:
    draw_set_color(healthBarColor_shieldForeground);
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);
}

// Return draw color to normal:
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
