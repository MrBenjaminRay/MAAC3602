<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ANIMATION:
animationSpeed = 1;
animationSpeedAdjust = 1;           // Increase or decrease the animation speed for a level. E.g. underwater level has speed adjust &lt; 1.

image_xscale_faceRight = 1;         // xscale to use when facing right. image_xscale is set to this or -this in entity horizontal movement code
                                    // If the sprite is drawn facing left, make this negative.
image_yscale = 1;                   // yscale for this entity

// SMOOTH MOVEMENT
// NOTE: To make an entity move left/right, SET movementSpeedDesired = movementSpeedDefault (right) or -movementSpeedDefault (left)
speed = 0;                          // DO NOT SET THIS VALUE. Current actual left/right movement (cotrolled using variables below)
speed_x = 0;
speed_y = 0;
movementSpeedDefault = 125 / 1000;  // Speed to use when setting desired speed (when entity moves left/right)
movementSpeedDesired = 0;           // Current desired movement speed (normally -movementSpeedDefault or +movementSpeedDefault)
movementSpeedAdjust = 1;            // Increase or decrease movement speed for a level.  E.g. underwater level has speed adjust &lt; 1.
movementSpeedAcceleration = 0.005;  // Speed at which to accelerate movement speed until moving at movementSpeedDesired
movementSpeedDeceleration = 0.01;   // Speed at which to decelerate movement speed until moving at movementSpeedDesired
movementFrictionLevel = 1;          // Friction level. Only affects acceleration &amp; deceleration speed. Typically between 0 and 1. 
                                    // 0 = no friction, 1 = normal. 1+ would be extra friction. Use low value (.1 or .2) for ice level,
                                    // and medium-low level (.5) for underwater level.
movementSlowEffectLevel = 1;        // 1 = normal, .5 = 1/2 speed, etc. This is necessary for implementing a slow effect on the entity, e.g. calculating speed ratio based on slow stacks.

outOfBoundsBounce = true;       // Automatically reverse direction &amp; restart movement when going out of bounds
                                // When false, they are pushed back into the room &amp; stopped.
wallBounce = true;              // Automatically switch direction &amp; restart movement when hitting a wall.
                                // When false, they are simply pushed out of the wall &amp; stopped.

jumpSpeed = .72;                // Jump Movement Speed
jumpAdjust = 1;                 // Increase or decrease gravity AND jump speed on a level with this. E.g. underwater level has &lt; 1 jump speed adjustment.
gravConst = 0.0015;             // Gravity Constant - Can override for entities that are really light or really heavy (feathers, pianos, etc.)
gravAdjust = 1;                 // Increase or decrease gravity AND jump speed on a level with this. E.g. underwater level has &lt; 1 gravity adjustment.
isJumping = false;              // Whether or not the entity is jumping.
isDropping = false;             // Whether or not the entity is dropping to a lower platform.
dropPlatformY = 0;              // The y coordinate of the platform where the entity's current drop was last approved.  This helps us prevent the entity from dropping 
                                // through the floor when dropping from a higher level when drop speed is high and entity is tall. Previously we let him continue dropping if
                                // he was already dropping and he collided with a platform, and we cleared the drop flag once we detected he was no longer colliding
                                // with a platform. But when drop speed is high and player is tall, he may not have a step where he is collision-free between two platforms.
                                // So when we detect collision at a y position that is much different from when the drop was approved, we recheck and validate the drop.
                                // If not validated, he is pushed up to the platform above.

// WEAPON:
attackRate = room_speed / 2;    // The number of delta time between attacks.
attackRateCounter = 0;          // The number of delta time since the last attack.
attackDamage = 10;              // The amount of damage done by each attack.
attackRange = sprite_width/2;   // The distance from the entity's origin that melee attacks can be done within.

weaponObj = noone;              // The weapon to display on the entity or noone if there isn't one.
weaponXOffset = sprite_width/2; // The x-axis position, in relation to this entity, of where to place the weapon obj.
weaponYOffset = sprite_height/2;// The y-axis position, in relation to this entity, of where to place the weapon obj.
weaponKickbackMax = sprite_width/6;    // The maximum kickback for the entity's weapon. Overridden in player create code.
weaponKickback = weaponKickbackMax;    // The current kickback for the entity's weapon. Start with max so gun comes out after object created.
weaponKickbackOffsetX = 0;             // The current additional x offset caused by weapon kickback. This is calculated based on weaponKickback.
weaponKickbackOffsetY = 0;             // The current additional y offset caused by knockback. This is calculated based on weaponKickback.
weaponKickbackResetSpeed = 0.1;        // How quickly to lower kickback. Will be multiplied by delta time.  Overridden in player create code.

// HEALTH &amp; SHIELDS:
currShield = 0;                 // The current sheild value.
currHealth = 100;               // The current health value.

maxShield = 0;                  // The maximum shield value.
maxHealth = 100;                // The maximum health value.

// HEALTH/SHIELD BAR:
showHealthBar = true;

healthBarXOffset = 0;
healthBarYOffset = 0;

healthBarHeight = 10;
healthBarWidth = sprite_width;

healthBarGlowAmnt = 1.0;
healthBarGlowDecrease = true;

// Emitter to use when this entity emits fire
emitter_fire = noone;
//fire_rate = 0;
//fire_timeToNext = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the Weapon Object:
with (weaponObj) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check for Pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check if game is paused
if (os_is_paused()) {
    show_debug_message('PAUSED - Skipping a step event. Might prevent death on pause!');
    return 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// SPECIAL CASE:
// If the entity's y-axis coordinate is above 0, then force the entity back
// down to y = 0, unless it is the player, who is allowed to fly through the air
// like he just don't care.
// We used to do forceDrop here, but forcing a drop gets complicated if the entity has no platform
// below them (e.g. jumping from top platform towards area with no platforms). The drop state
// won't work if there are no platforms below the entity.
if (y &lt; 0) {
    if (object_index != obj_player) {
        y = 0;
    }
    //scr_entity_forceDrop();
}

// SPECIAL CASE:
// If the entity is inside a tile at the start of a step, either it was erroneously
// pushed down into the tile, the sprite is animated or rotating and the collision
// mask has pushed down into the tile without the y position changing.
// Note: If entity is dropping or jumping through a tile, this block is skipped, 
// as the entity is allowed to be inside a tile.
while (place_meeting(x, y, obj_physicsTile) &amp;&amp; !isDropping &amp;&amp; !isJumping) {
    y--;
}

// APPLY GRAVITY
// Increase vertical speed (regardless of jumping or not)
vspeed += gravConst * gravAdjust * global.deltaTime; // Increase speed based on delta time

var newY = y + vspeed * global.deltaTime; // Get new proposed y value based on speed &amp; delta time

if (place_meeting(x, newY, obj_physicsTile)) {
    // Collision at new Y
    
    // DROPPING STUFF
    if (isDropping) {
        
        // Flag isDropping can only be set when the drop is valid, given the fact that we do some pretty
        // exhaustive checks in the drop() script, as well as checks at the end of this code block to
        // clear the flag when it is no longer needed.
        // Given that, if the flag is set, we let the entity drop.
        
        y = newY;
        
    }
    
    // JUMPING STUFF
    if (!isJumping || (isJumping &amp;&amp; vspeed &gt; 0 &amp;&amp; !place_meeting(x, y, obj_physicsTile))) {
        // Either:
        //      Entity is not jumping, or
        //      Entity is jumping, is on the way down from the jump (vspeed&gt;0), and has cleared
        //      the platform - it was not colliding last step (y) and is colliding this step (newY).
        //      Entity will now be standing on top of the platform.

        // Don't halt movement if we are already dropping (player can start a drop before entity lands
        // during a jump, so there may be some overlap)
        if (!isDropping) {
            // Not dropping, so end the jump with a hard stop at the top of the tile
            
            // With collision at new Y, we can't just move there. Instead, we change y until it would collide.
            var tweakY;
            if (vspeed &lt; 0) {
                tweakY = -1; // Entity is travelling upward
            } else {
                tweakY = 1; // Entity is travelling downward
            }
    
            // Increase/decrease Y until entity would collide.
            while (place_meeting(x, y+tweakY, obj_physicsTile) == false) {
                y += tweakY;
            }

            // Whether entity was going up or down, vspeed must be set to 0.
            vspeed = 0;

        }
        
        // If entity was jumping, clear the flag now that the jump is over (either player landed on tile or is dropping through)
        if (isJumping) { 
            isJumping = false;
        }
                
    } else {
        // Entity is jumping, is colliding with a platform, and has not cleared the platform yet, 
        // so let him pass through it.
        y = newY;
    }

} else {
    // No collision at new Y, so we can just go there
    y = newY;
    
    // DROPPING:
    //if (isDropping) {
        // If there is no collision at the current location, the player has finished dropping through the
        // tile he was on, and we can let the gravity/collision code do the rest.
        //if (place_meeting(x, y, obj_physicsTile) == false) {
            //isDropping = false;
        //}
    //}

}

// This section clears the drop flag in one of two scenarios:
// 1:  The entity is not currently colliding with a floor tile at all
// 2:  The entity is colliding with at least one floor tile that has a different Y position
// than the Y position that this entity was last approved to drop through (dropPlatformY).
// This check occurs after gravity is applied, so if the player was holding the drop key
// and was in the air when the step began, and gravity made him collide with a lower platform,
// the flag won't be cleared in that case.

// Attempt to clear dropping flag if possible
if (isDropping) {
    //show_debug_message('START CHECK');
    //show_debug_message('entity y = ' + string(y));
    //show_debug_message('platform y = ' + string(dropPlatformY));
    // The entity is dropping. If the entity's current position (before gravity applied) is 
    // not colliding with a platform at the Y position where the drop was approved, then
    // this drop flag can be cleared.
    var instList = instance_place_list(x, newY, obj_physicsTile);
    var foundMatch = false;
    var unapprovedPlatformYFound = false;
    if (instList != noone) {
        for (var i = 0; i &lt; ds_list_size(instList); i++) {
            if (instance_exists(instList[| i])) {
                var item = instList[| i];
                //show_debug_message('checking y: ' + string(item.y));
                if (item.y == dropPlatformY) {
                    //foundMatch = true;
                    //show_debug_message('found y match!');
                } else {
                    unapprovedPlatformYFound = true;
                }
            }
            //show_debug_message('colliding with ' + string(ds_list_size(instList)) + ' instances');
        }
        if (unapprovedPlatformYFound) {
            // Invalid y position of platform detected
            isDropping = false;
            dropPlatformY = 0;
        } else {
        
        }
        if (foundMatch == true) {
            // Currently colliding with a platform at the approved Y
            // Do nothing        
        } else {
            // Not colliding with a platform at the approved Y
            //isDropping = false;
            //dropPlatformY = 0;
            //show_debug_message('clearing flag and Y... - collision but not with right platforms');
        }
    } else {
        // No collision with any platforms
        isDropping = false;
        dropPlatformY = 0;
        //show_debug_message('clearing flag and Y... - no collision at all');
    }
    
    //show_debug_message('END CHECK');
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Horizontal Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (object_index == obj_player) {
    image_speed = animationSpeed * animationSpeedAdjust;
}

// Handle smooth movement acceleration &amp; deceleration to wanted speed.

// ONE-LINE VERSION (if acceleration &amp; deceleration speeds are stored in same variable)
//movementSpeed += (movementSpeedDesired - movementSpeed) * movementSpeedAcceleration * global.deltaTime; //Smoothly accelerate / decelerate to the wanted speed.

// TWO-SPEED VERSION (different acceleration &amp; deceleration speeds)
if (abs(speed_x) &lt; abs(movementSpeedDesired - speed_x)) {
    // Slow the speed with the DEceleration variable
    //hspeed += (movementSpeedDesired - hspeed) * movementSpeedAcceleration * movementFrictionLevel * global.deltaTime;
    speed_x += (movementSpeedDesired - speed_x) * movementSpeedAcceleration * movementFrictionLevel * global.deltaTime;
} else {
    // Increase the speed with the ACCeleration variable
    //hspeed += (movementSpeedDesired - hspeed) * movementSpeedDeceleration * movementFrictionLevel * global.deltaTime;
    speed_x += (movementSpeedDesired - speed_x) * movementSpeedDeceleration * movementFrictionLevel * global.deltaTime;
}

// SPECIAL CASE:
// Sprite animation or sprite change (other than horizontal mirroring) has pushed
// this entity's collision box into a wall.
// If the entity is inside a wall tile at the start of a step, it is
// likely due to a change in the collision box due to the sprite index
// changing (animated sprite). Changes to mirroring of sprites are handled
// below.
//while (place_meeting(x, y, obj_wallTile)) {
    // Push entity out of tile based on direction, as the entity is
    // probably pushing against this wall and the animation changed the
    // bounding box so that it now collides with the wall.
    //if (speed_x &gt; 0) {
        // Facing right, so push out to the left
        //x--;
    //} else if (speed_x &lt; 0) {
        // Facing left, so push out to the right
        //x++;
    //}
//}



// ENTITY LEFT/RIGHT MIRRORING
// We always do left/right mirroring so that we can check if switching the
// sprite's image_xscale causes the object to suddenly collide with a wall tile.
// Set xscale based on movement direction (only sets when moving)
var prevXScale = image_xscale; // Track if we flip (mirror) the entity so we can check collision changes
if (speed_x &gt; 0) {
    // Normal xscale when traveling to the right
    image_xscale = image_xscale_faceRight;
} else if (speed_x &lt; 0) {
    // Mirrored xscale when traveling to the right
    image_xscale = -image_xscale_faceRight;
}
//if (image_xscale != prevXScale) {
    //show_debug_message('sprite mirrored');
    // If we are colliding at this point, the entity was likely stopped against a wall,
    // changed direction, and the collision box pushed into the wall when the xscale changed (above).
    // In that case, push the entity out of the wall based on the direction currently going.
    //while (place_meeting(x, y, obj_wallTile)) {
    //    if (speed_x &gt; 0) {
    //        x++;
    //    } else {
    //        x--;
    //    }
    //}
//}


// If colliding with a wall tile at this point, it will be because of a change
// in the entity sprite, either animation or different sprite causing the bounding box
// to push into the wall tile.  Or knockback done wrong.
var iLoop = 0;
var iMaxLoop = 50;
while (place_meeting(x, y, obj_wallTile)) {
    //show_debug_message('looping: ' + string(iLoop));
    // Entity may be colliding against multiple wall tiles, but we will try to resolve
    // the collision with the first one returned by instance_place() and then check
    // again if still colliding.
    // Will use a max loop counter in case somehow entity is stuck between two walls
    // and being bounced back &amp; forth infinitely here.
    if (iLoop &gt;= iMaxLoop) {
        // Entity is obviously stuck, so throw him to the top center of the level (he will drop down)
        x = room_width/2;
        y = 0;
        break;
    }
    // Get first tile with which the entity is colliding
    var tile = instance_place(x, y, obj_wallTile);
    if (tile != noone) {
        // Colliding against at least one wall tile
        //show_debug_message(string(bbox_left) + ',' + string(bbox_right) + ' -- ' + string(tile.bbox_left) + ',' + string(tile.bbox_right));
        var leftIn = bbox_left &gt;= tile.bbox_left &amp;&amp; bbox_left &lt;= tile.bbox_right;
        var rightIn = bbox_right &gt;= tile.bbox_left &amp;&amp; bbox_right &lt;= tile.bbox_right;
        //show_debug_message(string(leftIn) + ' ' + string(rightIn));
        var pushDir = 0;  // Direction to push entity x. -1 = left, 1 = right, and if 0 will move up (y--) instead
        // See what kind of overlap we're dealing with here    
        if (leftIn &amp;&amp; !rightIn) {
            // Left edge of entity is inside wall, right edge is not
            pushDir = 1; // Will push to the right
            //show_debug_message('left edge inside wall, right is not');
        } else if (!leftIn &amp;&amp; rightIn) {
            // Right edge of entity is inside wall, left edge is not
            pushDir = -1; // Will push to the left
            //show_debug_message('right edge inside wall, left is not');
        } else {
            // EITHER:
            //      Both edges of entity are inside wall (entity smaller than wall)
            // OR:
            //      Both edges of entity are outside wall (entity larger than wall)
            //show_debug_message('entities fully overlapping');
            // If speed is set (likely, as wall/entity are overlapping completely),
            // use speed to determine whether to send left or right (opposite)
            if (speed_x &gt; 0) {
                pushDir = -1; // Will push to the left (entity is moving to the right)
            } else if (speed_x &lt; 0) {
                pushDir = 1; // Will push to the left (entity is moving to the right)
            } else {
                pushDir = 0; // Will push entity UP
            }
        }

        if (pushDir == 1) {
            // Push to the right based on overlap of bounding boxes (+1)
            x += tile.bbox_right - bbox_left + 1;        
            //show_debug_message('pushing to the right');
        } else if (pushDir == -1) {
            // Push to the left based on overlap of bounding boxes (-1)
            x += tile.bbox_left - bbox_right - 1;
            //show_debug_message('pushing to the left');
        } else {
            // We have no way to know which x direction to send the entity, and
            // it is fully overlapping (or being overlapped) against the tile,
            // so in this very rare case we will PUSH IT UP and out of the wall.
            //show_debug_message("pushing UP, as we cant tell how to move");
            y -= bbox_bottom - tile.bbox_top + 1;
        }
        
        // At this point, the entity should no longer be in collision with this particular wall tile.
        // Will repeat this if collides with another wall tile.
    }
    iLoop++;
}

// TEMP CHECK FOR UNEXPECTED COLLISION 
if (place_meeting(x, y, obj_wallTile)) {
    if (object_index == obj_player) {
        show_debug_message('EARLY PLAYER COLLISION STILL EXISTS!');
    }
}


// At this point, we should not be colliding with wall tiles

// Calculate new proposed position
//var newX = x + hspeed * movementSlowEffectLevel * global.deltaTime;
var newX = x + speed_x * movementSlowEffectLevel * global.deltaTime;

// Check collision with wall tiles first
if (place_meeting(newX, y, obj_wallTile)) {
    var prevSpeedX = speed_x; // Store temporarily as we have to stop the player
    
    // Round the new x position to nearest integer. Otherwise, fractions in the speed
    // push us into the tile at different locations, and then when we back out 1 px at a time,
    // our location outside of the tile will vary from step to step, causing a jittery
    // effect when the entity (mainly the player) continue to try to move into the wall.
    newX = round(newX);
    // Reverse newX until it is not colliding with a wall tile
    while (place_meeting(newX, y, obj_wallTile)) {
        if (speed_x &gt; 0) {
            // Entity was moving to the right, so we will inch the new x pos by -1
            newX--;
        } else {
            // Entity was moving to the left, so we will inch the new x pos by 1
            newX++;
        }
    }
    
    // Stop entity movement. This resets speed_x, so we can't use that to check speed anymore
    scr_entity_stopMoving_Sudden();
    
    // Restart entity movement if bounce variable is set
    if (wallBounce) {
        if (prevSpeedX &gt; 0) {
            // Was moving right, so now move left
            scr_entity_startMovingLeft();
        } else {
            // Was moving left, so now move right
            scr_entity_startMovingRight();
        }
    }

}

// At this point, newX should not be in collision with a wall tile.

// Check collision with floor tiles
if (!isJumping &amp;&amp; place_meeting(newX, y, obj_physicsTile) &amp;&amp; !place_meeting(x, y, obj_physicsTile)) {
    // Player not jumping, new X would collide with floor tile, and current X doesn't. We can't let 
    // horizontal movement push player into a floor tile when they are not jumping, so inch player 
    // in direction until he would collide.

    while (place_meeting(newX, y, obj_physicsTile)) {
        if (speed_x &gt; 0) {
            // Entity is moving to the right, so we will pull the entity back to the left by 1
            newX --;
        } else {
            // Entity is moving to the left, so we will pull the entity back to the right by 1
            newX ++;
        }
    }
    
    // Stop entity movement.
    scr_entity_stopMoving_Sudden();
}

// At this point, new X is not colliding with a wall tile, and is not colliding
// with a floor tile unless we were already colliding with a floor tile (allowed by vertical movement checks)
x = newX;

if (place_meeting(x, y, obj_wallTile)) {
    show_debug_message("STILL horizontal collision at end of checks. Should be impossible.");
}

// Stuff below here is out of date
return 0;











// Check collision
if (place_meeting(newX, y, obj_physicsTile)) {
    // Collision at new X

    if (place_meeting(x, y, obj_physicsTile) == false) {
        // No collision at current (prev) X, so horizontal movement would be responsible for
        // pushing entity into a tile if we moved it to newX.  Instead, we inch the entity 
        // in the same direction it was going until it would collide, then stop.
        
        // Increase X until entity would collide
        var moveAdjust = 0; // Will either be 1 or -1 depending on entity direction
        if (newX &gt; x) { // We could have also just checked speed_x
            // Entity is moving to the right, so we will inch the x direction by 1
            moveAdjust = 1;
        } else if (newX &lt; x) {
            // Entity is moving to the left, so we will inch the x direction by -1
            moveAdjust = -1;        
        } else {
            // NOTE: newX and x will always be different, as we aren't colliding at X but
            // we would be at the new X.
        }
        
        while (place_meeting(x + moveAdjust, y, obj_physicsTile) == false) {
            x += moveAdjust;
            show_debug_message('move adjust: ' + string(moveAdjust));
        }
        // Entity should be right against the tile now
    } else {
        // Collision at both current and new X, so this horizontal movement would not be
        // responsible for pushing entity into a tile. Entity was already in a tile (for
        // whatever reason), so allow it to continue being in the tile.
        // NOTE: Vertical entity movement occurs first, so it most likely pushed player into
        // a tile. Because jumping &amp; dropping are handled there, we trust it would not let
        // an entity into a tile unless it was warranted.
        // NOTE: This logic is bad when it comes to player jumping into a platform that has a
        // side wall attached (e.g. player jumps into top left/right corner of a box from inside),
        // as player would be allowed into the platform, and nothing would stop it from going
        // through the wall once inside the ceiling. If we ever have that kind of shape on a level,
        // we'll need to adjust this.  (Probably this:  check whether horizontal collision this step 
        // is with same tile as last step, and reject if it's a different tile. Maybe.)
        // ALSO:  If player is falling into a lower left/right corner and dips into the platform,
        // appears to let horizontal movement into platform, then y-- pulls it to top of wall.
        x = newX;
    }

} else {
    // No collision at new X
    x = newX;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showHealthBar == false) {
    return 0;
}

// Determine initial coordinates:

if (object_is_ancestor(object_index, obj_tower)) {
    // Tower entity sprites are expeced to have origin at top left
    var xPos_left = x + healthBarXOffset;
    var yPos_top = y + healthBarYOffset;
} else {
    // Non-tower entity sprites are expected to have origin centered vertically &amp; horizontally
    var xPos_left = x - healthBarWidth/2 + healthBarXOffset;
    var yPos_top = y - sprite_height/2 - healthBarHeight/2 + healthBarYOffset;
}

var xPos_right = xPos_left + healthBarWidth;
var yPos_bottom = yPos_top + healthBarHeight;

// Draw Bar Background:
draw_set_color(c_black);
draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);

// Adjust coordinates to allow a border to be shown:
var borderWidth = 2;
xPos_left += borderWidth;
yPos_top += borderWidth;
yPos_bottom -= borderWidth;

if (maxHealth &gt; 0 &amp;&amp; currHealth &gt; 0) {
    // Adjust coordinates for health percentage:
    var healthPct = currHealth / maxHealth;
    var xPos_right = xPos_left + (healthBarWidth * healthPct) - (borderWidth * 2);
    
    // Draw Health Bar:
    draw_set_color(merge_color(c_lime, c_green, healthBarGlowAmnt));
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);
}


if (maxShield &gt; 0 &amp;&amp; currShield &gt; 0) {
    // Adjust coordinates for shield percentage:
    var shieldPct = currShield / maxShield;
    var xPos_right = xPos_left + (healthBarWidth * shieldPct) - (borderWidth * 2);
    
    // Draw Shield Bar:
    draw_set_color(merge_color(c_aqua, c_teal, healthBarGlowAmnt));
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom - (healthBarHeight/2.5), false);
}

// Animate Bar Glow EffecT:
if (healthBarGlowAmnt == 0.0) {
     healthBarGlowDecrease = false;
}

if (healthBarGlowAmnt == 1.0) {
     healthBarGlowDecrease = true;
}

if (healthBarGlowDecrease) {
    healthBarGlowAmnt -= 0.01
} else {
    healthBarGlowAmnt += 0.01
}

// Return draw color to normal:
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
