<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>object</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ANIMATION:
animationSpeed = 1;
animationSpeedAdjust = 1;           // Increase or decrease the animation speed for a level. E.g. underwater level has speed adjust &lt; 1.

// MOVEMENT:
movementSpeed = 0;                  // Actual current Left/Right Movement Speed
// SMOOTH MOVEMENT (currently used by player, nothing else yet)
movementSpeedDefault = 150 / 1000;  // Speed to set as desired speed when (mainly left/right)
movementSpeedDesired = 0;           // Current desired movement speed (normally -movementSpeedDefault or +movementSpeedDefault)
movementSpeedAdjust = 1;            // Increase or decrease movement speed for a level.  E.g. underwater level has speed adjust &lt; 1.
movementSpeedAcceleration = 0.005;  // Speed at which to accelerate movement speed until moving at movementSpeedDesired
movementSpeedDeceleration = 0.01;   // Speed at which to decelerate movement speed until moving at movementSpeedDesired
movementFrictionLevel = 1;          // Friction level. Only affects acceleration &amp; deceleration speed. Typically between 0 and 1. 
                                    // 0 = no friction, 1 = normal. 1+ would be extra friction. Use low value (.1 or .2) for ice level,
                                    // and medium-low level (.5) for underwater level.

jumpSpeed = .72;                // Jump Movement Speed
jumpAdjust = 1;                 // Increase or decrease gravity AND jump speed on a level with this. E.g. underwater level has &lt; 1 jump speed adjustment.
gravConst = .0015;              // Gravity Constant - Can override for entities that are really light or really heavy (feathers, pianos, etc.)
gravAdjust = 1;                 // Increase or decrease gravity AND jump speed on a level with this. E.g. underwater level has &lt; 1 gravity adjustment.
isJumping = false;              // Whether or not the entity is jumping.
isDropping = false;             // Whether or not the entity is dropping to a lower platform.

// WEAPON:
attackRate = room_speed / 2;    // The number of delta time between attacks.
attackRateCounter = 0;          // The number of delta time since the last attack.
attackDamage = 10;              // The amount of damage done by each attack.
attackRange = sprite_width/2;   // The distance from the entity's origin that melee attacks can be done within.

weaponObj = noone;              // The weapon to display on the entity or noone if there isn't one.
weaponXOffset = sprite_width/2; // The x-axis position, in relation to this entity, of where to place the weapon obj.
weaponYOffset = sprite_height/2;// The y-axis position, in relation to this entity, of where to place the weapon obj.
weaponKickbackMax = sprite_width/6;    // The maximum kickback for the entity's weapon. Overridden in player create code.
weaponKickback = weaponKickbackMax;    // The current kickback for the entity's weapon. Start with max so gun comes out after object created.
weaponKickbackOffsetX = 0;             // The current additional x offset caused by weapon kickback. This is calculated based on weaponKickback.
weaponKickbackOffsetY = 0;             // The current additional y offset caused by knockback. This is calculated based on weaponKickback.
weaponKickbackResetSpeed = 0.1;        // How quickly to lower kickback. Will be multiplied by delta time.  Overridden in player create code.

// HEALTH &amp; SHIELDS:
currShield = 0;                 // The current sheild value.
currHealth = 100;               // The current health value.

maxShield = 0;                  // The maximum shield value.
maxHealth = 100;                // The maximum health value.

// HEALTH/SHIELD BAR:
showHealthBar = true;

healthBarXOffset = 0;
healthBarYOffset = 0;

healthBarHeight = 10;
healthBarWidth = sprite_width;

healthBarColor_background = c_black;           // The background color of the health/shield bar.
healthBarColor_healthForeground = c_lime;      // The foreground color of the health bar.
healthBarColor_shieldForeground = c_teal;      // The foreground color of the sheld bar.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy the Weapon Object:
with (weaponObj) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

image_speed = animationSpeed * animationSpeedAdjust;

// SPECIAL CASE:
// If the entity's y-axis coordinate is above 0, then force the entity to
// drop to a lower platform.
if (y &lt; 0) {
    scr_entity_forceDrop();
}

// SPECIAL CASE:
// If the entity is inside a tile at the start of a step, either it was erroneously
// pushed down into the tile, the sprite is animated or rotating and the collision
// mask has pushed down into the tile without the y position changing.
// Note: If entity is dropping or jumping through a tile, this block is skipped, 
// as the entity is allowed to be inside a tile.
while (place_meeting(x, y, obj_physicsTile) &amp;&amp; !isDropping &amp;&amp; !isJumping) {
    y--;
}

// APPLY GRAVITY
// Increase vertical speed (regardless of jumping or not)
vspeed += gravConst * gravAdjust * global.deltaTime; // Increase speed based on delta time

var newY = y + vspeed * global.deltaTime; // Get new proposed y value based on speed &amp; delta time

if (place_meeting(x, newY, obj_physicsTile) &amp;&amp; !isDropping) {
    // Collision at new Y
    if (!isJumping || (isJumping &amp;&amp; vspeed &gt; 0 &amp;&amp; !place_meeting(x, y, obj_physicsTile))) {
        // Either:
        //      Entity is not jumping, or
        //      Entity is jumping, is on the way down from the jump (vspeed&gt;0), and has cleared
        //      the platform - it was not colliding last step (y) and is colliding this step (newY).
        //      Entity will now be standing on top of the platform.
        
        // With collision at new Y, we can't just move there. Instead, we change y until it would collide.
        var tweakY;
        if (vspeed &lt; 0) {
            tweakY = -1; // Entity is travelling upward
        } else {
            tweakY = 1; // Entity is travelling downward
        }

        // Increase/decrease Y until entity would collide.
        while (place_meeting(x, y+tweakY, obj_physicsTile) == false) {
            y += tweakY;
        }

        // Whether entity was going up or down, vspeed must be set to 0.
        vspeed = 0;
        
        // If entity was jumping, clear the flag now that it has stuck the landing
        if (isJumping) { 
            isJumping = false;
        }
                
    } else {
        // Entity is jumping, is colliding with a platform, and has not cleared the platform yet, 
        // so let him pass through it.
        y = newY;
    }

} else {
    // No collision at new Y, or player is dropping through tile, so we can just move there.
    y = newY;
}

// DROPPING:
if (isDropping) {
    // If there is no collision at the current location, the player has finished dropping through the
    // tile he was on, and we can let the gravity/collision code do the rest.
    if (place_meeting(x, y, obj_physicsTile) == false) {
        isDropping = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showHealthBar == false) {
    return 0;
}

// Determine initial coordinates:
var xPos_left = x + healthBarXOffset;
var yPos_top = y + healthBarYOffset;
var xPos_right = xPos_left + healthBarWidth;
var yPos_bottom = yPos_top + healthBarHeight;

// Draw Bar Background:
draw_set_color(healthBarColor_background);
draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);

// Adjust coordinates to allow a border to be shown:
var borderWidth = 2;
xPos_left += borderWidth;
yPos_top += borderWidth;
yPos_bottom -= borderWidth;

if (maxHealth &gt; 0 &amp;&amp; currHealth &gt; 0) {
    // Adjust coordinates for health percentage:
    var healthPct = currHealth / maxHealth;
    var xPos_right = xPos_left + (healthBarWidth * healthPct) - (borderWidth * 2);
    
    // Draw Health Bar:
    draw_set_color(healthBarColor_healthForeground);
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom, false);
}


if (maxShield &gt; 0 &amp;&amp; currShield &gt; 0) {
    // Adjust coordinates for shield percentage:
    var shieldPct = currShield / maxShield;
    var xPos_right = xPos_left + (healthBarWidth * shieldPct) - (borderWidth * 2);
    
    // Draw Shield Bar:
    draw_set_color(healthBarColor_shieldForeground);
    draw_rectangle(xPos_left, yPos_top, xPos_right, yPos_bottom - (healthBarHeight/2.5), false);
}

// Return draw color to normal:
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
