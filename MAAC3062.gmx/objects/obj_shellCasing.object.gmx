<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shellCasing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 0.0025;
speed = random_range(.50, .55);

// This is only needed if gravity &amp; speed are out of whack.
// When gravity &amp; speed properly balanced, should only bounce a couple of times.
groundBounceCount = 0;
groundBounceCountMax = 5;

life = 0;
maxLife = 20000; // Will fade out over this period of time and destroy after expires

rotationSpeed = random_range(1.5, 2.5); // Will be inverted when casing flies to the right
rotation = 0;   // Use this to do custom rotation in draw event. This allows the collision mask
                // to remain unchanged so that we don't create artificial collision when rotating.
              

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (speed &gt; 0) {
    speed -= 0.007;
    if (speed &lt; 0) {
        speed = 0;
    }
}

// Apply gravity
vspeed += gravity * global.deltaTime;

// Do vertical movement
var oldY = y;
var newY = y + vspeed * global.deltaTime;
if (place_meeting(x, newY, obj_physicsTile)) {
    // Collision at new Y position
    // With collision at new Y, we can't just move there. Instead, we change Y until it would collide.
    var tweakY;
    if (vspeed &lt; 0) {
        tweakY = -1; // Entity is travelling upward
    } else {
        tweakY = 1; // Entity is travelling downward
    }
    // Increase/decrease Y until entity would collide.
    while (place_meeting(x, y + tweakY, obj_physicsTile) == false) {
        y += tweakY;
    }
    // Bounce vertically
    if (groundBounceCount &lt; groundBounceCountMax) {
        vspeed *= -1;
        vspeed *= .6; // Lose vspeed when bouncing
        rotationSpeed *= .6; // Lose rotation when bouncing
        groundBounceCount ++;
    } else {
        vspeed = 0;
        hspeed = 0;
        rotationSpeed = 0;
    }

} else {
    y = newY;
}

// Do horizontal movement
var oldX = x;
var newX = x + hspeed * global.deltaTime;
if (place_meeting(newX, y, obj_physicsTile)) {
    // Collision at new X position
    // With collision at new X, we can't just move there. Instead, we change X until it would collide.
    var tweakX;
    if (hspeed &lt; 0) {
        tweakX = -1; // Entity is travelling left
    } else {
        tweakX = 1; // Entity is travelling right
    }
    // Increase/decrease X until entity would collide.
    while (place_meeting(x + tweakX, y, obj_physicsTile) == false) {
        x += tweakX;
    }
    // Bounce horizontally
    hspeed *= -1;
    hspeed *= .8; // Lose hspeed when bouncing
    rotationSpeed *= .6; // Lose rotation when bouncing
} else {
    x = newX;
}

// Do rotation using custom variable which is used to rotate the sprite in the draw event.
// Since we never change image_angle, the sprite collision mask never rotates, and this prevents
// issues from collision box being pushed into a platform from rotation alone.
rotation += rotationSpeed * global.deltaTime;

life += global.deltaTime;
image_alpha = 1 - life / maxLife;
if (life &gt; maxLife) {
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, rotation, c_white, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
