<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_levelControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_levelControl</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Allow skipping of tutorial if already completed it
if (global.moonTutorialDone) {
    isTowerPlaced = true;
    hasPlayerRightClicked = true;
    cameraDone = true; // Tells us when the camera is done the little pre-level tour
    state = 5;
} else {
    isTowerPlaced = false;
    hasPlayerRightClicked = false;
    cameraDone = false; // Tells us when the camera is done the little pre-level tour
    state = 0;
    scr_notification_normal(spr_catapillager_note);
}

text1 = noone; // Message box telling player to place a tower
text2 = noone; // Message box telling player about collecting energy
text3 = noone; // Message box telling player to right-click to see tower sell interface

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Send the camera back to the player
scr_camera_follow_playerObjects();

// Let the controller know we can go to the next step
cameraDone = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Note: Should have messages follow player somehow

if (state == 0) {
    // Notification of tower unlock is being displayed
    
    if (scr_notificationCount() == 0) {
        // Player has closed tower unlock notification
        state = 1;
        
        // Show the level and set the alarm to bring the camera back.
        // Alarm updates the state variable to 2 when camera is on its way back.
        scr_camera_follow_fixedCoordinates(1600, 576);
        alarm_set(0, room_speed * 3); // 3 seconds
    }
    
} else if (state == 1) {
    // Alarm code will update state to 2 when the camera is on the way back to the player
    // Nothing to do here
    
    if (cameraDone) {
        // Camera on way back to player
        // Proceed to next state
        state = 2;
        text1 = instance_create(96, 608, obj_messageBox);
        ds_list_add(text1.list_text, "Hit 1 to begin placing your new tower.");
        ds_list_add(text1.list_text, "Use left mouse button to place it.");
        ds_list_add(text1.list_text, "You can only place towers near you.");
    }
} else if (state == 2) {

    // Waiting for player to place a tower
    
    if(instance_exists(obj_tower_caterpillager)){
        // Player has placed a tower
        // Proceed to the next step
        state = 3;
        scr_tutorial_thumbsUp(obj_player.x, obj_player.y - 30);
        // Destroy the previous message box if it exists
        if (instance_exists(text1)) { 
            with (text1) { instance_destroy(); }
        }
        // Create the next message box if it doesn't exist
        text2 = instance_create(96, 608, obj_messageBox);
        ds_list_add(text2.list_text, "Towers cost energy, so collect as much");
        ds_list_add(text2.list_text, "of the energy drops as you can.");
    }
} else if (state == 3) {
    // Waiting for tower to be built
    // As soon as it's up, kill the previous message and wait for the player to right-click
    
    if (instance_exists(obj_tower_caterpillager)) {
        if (obj_tower_caterpillager.warmUpRemaining &lt;= 0) {
            // Tower is fully built. Next step.
            scr_tutorial_thumbsUp(obj_player.x, obj_player.y - 30);
            state = 4;
            // Destroy the previous message box if it exists
            if (instance_exists(text2)) { 
                with (text2) { instance_destroy(); }
            }
            // Create the next message box if it doesn't exist
            text3 = instance_create(96, 608, obj_messageBox);
            ds_list_add(text3.list_text, "Right-click tower to see sell interface.");
            ds_list_add(text3.list_text, "Selling a tower gives you a partial refund.");
            ds_list_add(text3.list_text, "Either hit Sell or click elsewhere to cancel.");
        }
    }

} else if (state == 4) {
    // Waiting for player to right-click to see Sell interface

    // NOTE:  The variable is set in the tower sell code
        
    if (hasPlayerRightClicked) {
        // Player has right-clicked
        state = 5;
        
        // Set the global variable so we can skip the tutorial next time this level starts
        global.moonTutorialDone  = true;

        scr_tutorial_thumbsUp(obj_player.x, obj_player.y - 30);        

        // Destroy the previous message box if it exists
        if (instance_exists(text3)) { 
            with (text3) { instance_destroy(); }
        }

    }

} 


// If we make it this far, state is 5 and player is playing level normally
// This will run once to allow spawning to be enabled, then this will
// destroy itself.
if (state == 5) {
    var tmp = instance_create(-100, -100, obj_spawnerTimedEnable);
    tmp.alarm[0] = room_speed * 8;

    instance_destroy();
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
