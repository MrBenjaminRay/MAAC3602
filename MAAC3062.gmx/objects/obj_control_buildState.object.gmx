<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_buildStateControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tower = "No Name Set";
towerCost = 999999;
towerObj = noone;
towerSpr = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_player) {
    alarm[1] = room_speed/2;
    allowedToFire = false;
}

with (obj_tower_m6100) {
    alarm[1] = room_speed/2;
    allowedToFire = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (instance_number(obj_tower_m6100) == 0) {
        if (global.energy &gt;= global.towers[5, 1]) {
            tower = global.towers[5, 0];
            towerCost = global.towers[5, 1];
            towerObj = global.towers[5, 2];
            towerSpr = global.towers[5, 3];
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (global.energy &gt;= global.towers[4, 1]) {
        tower = global.towers[4, 0];
        towerCost = global.towers[4, 1];
        towerObj = global.towers[4, 2];
        towerSpr = global.towers[4, 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (global.energy &gt;= global.towers[3, 1]) {
        tower = global.towers[3, 0];
        towerCost = global.towers[3, 1];
        towerObj = global.towers[3, 2];
        towerSpr = global.towers[3, 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (global.energy &gt;= global.towers[2, 1]) {
        tower = global.towers[2, 0];
        towerCost = global.towers[2, 1];
        towerObj = global.towers[2, 2];
        towerSpr = global.towers[2, 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (global.energy &gt;= global.towers[1, 1]) {
        tower = global.towers[1, 0];
        towerCost = global.towers[1, 1];
        towerObj = global.towers[1, 2];
        towerSpr = global.towers[1, 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    if (global.energy &gt;= global.towers[0, 1]) {
        tower = global.towers[0, 0];
        towerCost = global.towers[0, 1];
        towerObj = global.towers[0, 2];
        towerSpr = global.towers[0, 3];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    scr_state_setNormal();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Place tower if location valid</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    // Clamp the x position to the nearest multiple of 32:
    var tempX = mouse_x - (mouse_x % 32);
    
    // Clamp the y position to the nearest multiple of 32:
    var tempY = mouse_y - (mouse_y % 32);
    
    // Offset the tempY position to ensure the tower's aren't drawn floating above the ground:
    tempY += 128 - sprite_get_height(towerSpr);
    
    // Determine if the (x, y) location is valid:
    var isLocationValid = collision_rectangle(tempX, tempY, tempX + sprite_get_width(towerSpr) - 1, tempY + sprite_get_height(towerSpr) - 1, obj_physicsTile, false, true) == noone;
    isLocationValid &amp;= collision_rectangle(tempX, tempY + 32, tempX + sprite_get_width(towerSpr) - 1, tempY + 32 + sprite_get_height(towerSpr)- 1, obj_physicsTile, false, true) != noone;
    isLocationValid &amp;= collision_rectangle(tempX, tempY, tempX + sprite_get_width(towerSpr) - 1, tempY + sprite_get_height(towerSpr) - 1, obj_tower, false, true) == noone;
    
    if (tower == "M-6100") {
        var player = instance_nearest(x, y, obj_player);
        isLocationValid &amp;= point_distance(player.x, player.y, mouse_x, mouse_y) &lt;= 128;
    }
    
    if (isLocationValid) {
        instance_create(tempX, tempY, towerObj);
        
        global.energy -= towerCost;
        
        audio_play_sound(snd_build, 0, false);
        
        scr_state_setNormal();
        
        
        // Special Case, M-6100 Tower:
        if (tower == "M-6100") {
            with(instance_nearest(x, y, obj_player)) {
                with (weaponObj) {
                    instance_destroy();
                }
                
                weaponObj = noone;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

/////////////////////////////////////////// DRAW PLACEMENT SPRITES:
// Clamp the x position to the nearest multiple of 32:
var tempX = mouse_x - (mouse_x % 32);

// Clamp the y position to the nearest multiple of 32:
var tempY = mouse_y - (mouse_y % 32);

// Offset the tempY position to ensure the tower's aren't drawn floating above the ground:
tempY += 128 - sprite_get_height(towerSpr);

// Determine if the (x, y) location is valid:
var isLocationValid = collision_rectangle(tempX, tempY, tempX + sprite_get_width(towerSpr) - 1, tempY + sprite_get_height(towerSpr) - 1, obj_physicsTile, false, true) == noone;
isLocationValid &amp;= collision_rectangle(tempX, tempY + 32, tempX + sprite_get_width(towerSpr) - 1, tempY + 32 + sprite_get_height(towerSpr)- 1, obj_physicsTile, false, true) != noone;
isLocationValid &amp;= collision_rectangle(tempX, tempY, tempX + sprite_get_width(towerSpr) - 1, tempY + sprite_get_height(towerSpr) - 1, obj_tower, false, true) == noone;

if (tower == "M-6100") {
    var player = instance_nearest(x, y, obj_player);
    isLocationValid &amp;= point_distance(player.x, player.y, mouse_x, mouse_y) &lt;= 128;
}

// Draw Sprites:
draw_sprite(towerSpr, 0, tempX, tempY);

if (isLocationValid) {
    draw_sprite_stretched(spr_build_overlay_validLocation, 0, tempX, tempY, sprite_get_width(towerSpr), sprite_get_height(towerSpr));
} else {
    draw_sprite_stretched(spr_build_overlay_invalidLocation, 0, tempX, tempY, sprite_get_width(towerSpr), sprite_get_height(towerSpr));
}

/////////////////////////////////////////// DRAW TOWER RANGE:
var temp = instance_create(-500, -500, towerObj);
var range = temp.attackRange;
var rangeXOffset = temp.weaponXOffset;
var rangeYOffset = temp.weaponYOffset;

var xPos_left = tempX + rangeXOffset - range;
var yPos_top = tempY + rangeYOffset - range;
var xPos_right = tempX + rangeXOffset + range;
var yPos_bottom = tempY + rangeYOffset + range;

draw_set_color(c_green);
draw_ellipse(xPos_left, yPos_top, xPos_right, yPos_bottom, true);

with (temp) {
    instance_destroy();
}

/////////////////////////////////////////// DRAW TOWER COST:
// Determine Position:
var xCoord = view_wview[0] / 2;
var yCoord = 10;
var text = "Costs " + string(towerCost) + " Energy";

// Set Font:
draw_set_font(fnt_towerPlacement);

// Draw Background:
draw_set_color(c_black);
draw_text(xCoord + 2, yCoord + 2, text);

// Draw Foreground:
draw_set_color(c_green);
draw_text(xCoord, yCoord, text);

// Reset Draw Color:
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == 'Paused') {
    scr_state_setNormal();
} else {
    scr_state_setPaused();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
