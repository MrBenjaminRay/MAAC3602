<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mechagoat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-45</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xDest = x; // The destination x-axis coordinate.
yDest = y; // The destination y-axis coordinate.

projectileHitGain = 0.4;    // gain value for the projectileHit sounds.

scr_particle_projectile_addsmoketrail(.05);
movementSpeed = .1;
speed = .3;
gravity = 0.0005;

// Reference to enemy targeted by this projectile
targetEnemy = noone;

// Allow to fly around trying to hit enemy for about 20 seconds
life = 0;
maxLife = 20000;

// Direction in which the goat and his rocket are aimed. Rocket propels goat based on this direction.
// Will be slowly adjusted towards target.
// This is different from direction variable, as aim will not always match actual direction
direction_aim = 0;

armDelay = 1000;        // 1 second between when goat is launched and when it armed
                        // Prevents detonation at tower itself


// Whether or not to vertically flip the image
projFlip = false;

aimChangeRate = 0.01; // Rate at which the direction can be rotated towards the target.

// Variables to control how much speed the goat gets from the rocket. When rocket is enabled,
// rocketSpeed_actual will increase (+= rocketSpeed_changeRate * global.detlaTime) until it reaches
// rocketSpeed_max, at which poitn 
jetSpeed_actual = 0;
jetSpeed_max = 1;
jetSpeed_changeRate = 0.01; // Rate of acceleration when rocket speed climbing from 0 to max

jetDelay = 500;         // Delay before rocket starts
jetDelayElapsed = 0;     // Rocket delay elapsed

// Whether or not the rocket is currently on. rocketSpeeed_actual only increases when rocketOn = true.
jetOn = false;

// Reference to jet pack
jetPack = instance_create(x, y, obj_projectile_mechaGoat_jetPack);
jetPack.image_alpha = 0;
jetPack_offsetX = 0;
jetPack_offsetY = 0;

// Projectile depth after launch. Will be behind goat tower at first, but when in flight it
// should pass in front of just about everything.
depthAfterLaunch = -50;

// Play random goat sound
scr_sound_randomGoat();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_projectileHit_medium, 0, false);
audio_sound_gain(snd_projectileHit_medium, projectileHitGain, 0);

// Hit all enemies in range:
var range = 450;

for (i = 0 ; i &lt; instance_number(obj_enemy) ; i++) {
    var tmpEnem = instance_find(obj_enemy, i);
    var tmpDist = distance_to_object(tmpEnem);
    
    if (tmpDist &lt;= range) {        
        scr_entity_dealDamage(tmpEnem, damage);
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-75, 75), "Tower");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-75, 75), "Tower");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-75, 75), "Tower");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-75, 75), "Tower");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-125, 125), "Enemy_Large");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-125, 125), "Enemy_Large");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-125, 125), "Enemy_Large");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-125, 125), "Enemy_Large");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-200, 200), "Enemy_Medium");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-200, 200), "Enemy_Medium");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-200, 200), "Enemy_Medium");
        scr_create_explosion(x + random_range(-150, 150), y + random_range(-200, 200), "Enemy_Medium");
    }
}

if (instance_exists(jetPack)) {
    with (jetPack) {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override parent step event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (!instance_exists(targetEnemy)) {
    // No enemy, so destroy this and end the step here
    instance_destroy();
    return 0;
}

if (y &gt; room_height) {
    // Ground collision
    instance_destroy();
    return 0;
}

// Reduce speed
if (speed &gt; 0) {
    //speed -= 0.007;
    if (speed &lt; 0) {
        //speed = 0;
    }
}

// Decrement armDelay
if (armDelay &lt; 0) {
    armDelay = 0;
} else {
    armDelay -= global.deltaTime;
}

// When within range of target, always fly straight (either towards or away)
// This makes sure goat has to fly away from enemy, turn, then make another pass
if (abs(point_distance(x, y, targetEnemy.x, targetEnemy.y)) &lt;= 400) {
    aimChangeRate = 0;
} else {
    aimChangeRate = 1.5;
}

if (jetDelayElapsed &lt; jetDelay) {
    // Handle initial launch stage
    
    jetDelayElapsed += global.deltaTime;
    
} else {
    // Handle rocket flight
    if (jetOn == false) {
        // Jet pack firing up
        jetOn = true;
        jetPack.image_alpha = 1;
        jetPack.image_index = 0; // Restart animation
        depth = depthAfterLaunch; // Set goat depth after launch
        // Apply gravity (may have to move this to initial launch stage and not apply to flight stage)
        vspeed += gravity * global.deltaTime;
    }
    var enemyDir = point_direction(x, y, targetEnemy.x, targetEnemy.y);
    if (abs(enemyDir - direction_aim) &gt; 2) {
        // Not aimed close enough, so adjust aim direction towards enemy
        //if ((enemyDir - direction_aim) &gt; 0) {
            direction_aim += aimChangeRate;
        //} else {
        //    direction_aim -= 1;
        //}
    } else {
        // Aimed close enough
        //speed = jetSpeed_max;
        //jetSpeed_actual = jetSpeed_max;
        //speed += jetSpeed_actual;
    }

}

// Vertical movement (don't worry about collision yet)
y += (vspeed) * global.deltaTime;

// Horizontal movement (don't worry about collision yet)
x += (hspeed) * global.deltaTime;

scr_projectile_enforceMaxLife();

// Set sprite and jet pack angle to match current aim direction
image_angle = direction_aim;
direction = direction_aim;

if (instance_exists(jetPack)) {
    jetPack.image_angle = image_angle;
    jetPack.x = x + cos(degtorad(image_angle)) * jetPack_offsetX;
    jetPack.y = y - sin(degtorad(image_angle)) * jetPack_offsetY;
    jetPack.depth = depth -1; // Jet pack always appears in front of goat
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Check if is correct enemy, and detonate, otherwise ignore
if (other.object_index == targetEnemy.object_index &amp;&amp; armDelay &lt; 0) {
    instance_destroy();
    // Play random goat sound
    scr_sound_randomGoat();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
