<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mechagoat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-45</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xDest = x; // The destination x-axis coordinate.
yDest = y; // The destination y-axis coordinate.

scr_particle_projectile_addsmoketrail(.05);
movementSpeed = .1;
speed = .3;
gravity = 0.0005;

// Reference to enemy targeted by this projectile
targetEnemy = noone;

// Allow to fly around trying to hit enemy for about 30 seconds
maxLife = 30000;

// Reference to jet pack
jetPack = noone;

// Direction in which the goat and his rocket are aimed. Rocket propels goat based on this direction.
// Will be slowly adjusted towards target.
// This is different from direction variable, as aim will not always match actual direction
direction_aim = 0;

aimChangeRate = 0.01; // Rate at which the direction can be rotated towards the target.

// Variables to control how much speed the goat gets from the rocket. When rocket is enabled,
// rocketSpeed_actual will increase (+= rocketSpeed_changeRate * global.detlaTime) until it reaches
// rocketSpeed_max, at which poitn 
rocketSpeed_actual = 0;
rocketSpeed_max = 1;
rocketSpeed_changeRate = 0.01; // Rate of acceleration when rocket speed climbing from 0 to max

rocketDelay = 1000;         // Delay before rocket starts
rocketDelayElapsed = 0;     // Rocket delay elapsed

// Whether or not the rocket is currently on. rocketSpeeed_actual only increases when rocketOn = true.
rocketOn = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_projectileHit_medium, 0, false);
audio_sound_gain(snd_projectileHit_medium, projectileHitGain, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override parent step event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Reduce speed
if (speed &gt; 0) {
    speed -= 0.007;
    if (speed &lt; 0) {
        speed = 0;
    }
}

// Apply gravity (may have to move this to initial launch stage and not apply to flight stage)
vspeed += gravity * global.deltaTime;

if (rocketDelayElapsed &lt; rocketDelay) {
    // Handle initial launch stage
    
    rocketDelayElapsed += global.deltaTime;
    
    // Vertical movement (don't worry about collision yet)
    y += vspeed * global.deltaTime;
    
    // Horizontal movement (don't worry about collision yet)
    x += hspeed * global.deltaTime;
    
} else {
    // Handle rocket flight
    rocketOn = true;
    // Create the rocket flame animation if not already there
    // and fire it up
    //instance_create(x, y, obj_
}

scr_projectile_enforceMaxLife();

image_angle = direction_aim;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>return 0;

// Check if is correct enemy, and detonate, otherwise ignore

if (lastHitEnemy == noone || lastHitEnemy != other) {
    enemiesHit++;
    lastHitEnemy = other;

    if (isEnemyProjectile == false) {
        scr_entity_dealDamage(other, damage);
        scr_create_explosion(x, y, "Normal");
    }
    
    if (enemiesHit == maxEnemiesHit) {
        instance_destroy();
    }
    
    damage /= 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
