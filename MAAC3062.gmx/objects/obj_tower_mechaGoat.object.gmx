<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower_mechaGoat_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>obj_tower</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_entity_loadTowerData(6);

image_index = 0;
image_speed = 0;
state = -1; // 0 = finding target, 1 = mouth opening, 2 = launch goat(s), 3 = mouth open delay, 4 = mouth closing, 5 = cooldown
mouthAnimationSpeed = .1; // Speed to use when opening and closing (closing will be negative)
mouthOpenTime = 1000; // Amount of time to leave mouth open before closing
mouthOpenTimeElapsed = 0;

mouthClosedTime = 2000; // Amount of time to leave mouth closed before allowing to fire again
mouthClosedTimeElapsed = 0;

// Reference to goat projectile. Will be noone when no goat is in the air.
goatObj1 = noone;
goatObj2 = noone;
target1 = noone;
target2 = noone;

// When upgraded, this is how long to wait after first goat to fire second goat
secondGoatCountdown = 1000;
secondGoatFired = false;

if (global.towerUpgradeLevel[6] == 1) {
    // Goat tower not upgraded
    maxGoats = 1;
} else {
    // Goat tower is upgraded
    maxGoats = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_tower_destroyed_mechaGoat);
scr_create_explosion(x + sprite_width/2, y + sprite_height/2, 'Tower');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Launch Goat</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override obj_entity's step event.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (frozenByBossThree) {
    return 0;
}

var isUpgraded = false;
// Draw upgraded tower
if (global.towerUpgradeLevel[6] &gt; 1) {
    isUpgraded = true; // We need to keep track of this throughout the tower states
}

if (state == -1) {

    // Decrement warmup time remaining if not 0
    if (warmUpRemaining &gt; 0) { 
        warmUpRemaining -= global.deltaTime;
        image_yscale = (warmUpTotal - warmUpRemaining) / warmUpTotal;
        y = originalY + sprite_get_height(sprite_index) - image_yscale * sprite_get_height(sprite_index);
        //weaponObj.image_alpha = 0;
    }
    else {
        warmUpRemaining = 0;
        //weaponObj.image_alpha = 1;
    
        // Enable health bar display:
        showHealthBar = true;
        // Go to first state
        state = 0;
        //show_debug_message('state 0 started');
    }
} else if (state == 0) {
    // Hunt for a target (mouth closed)

    var canFire = !instance_exists(goatObj1) &amp;&amp; !instance_exists(goatObj2);
    if (canFire) {
        // Search for a potential target in order, aiming for biggest/baddest ones first (array defined in create code)
        // Only search for first enemy now. Find second enemy (if upgraded) after first one fired while mouth already open.
        target1 = scr_tower_getGoatTarget();
        if (isUpgraded) {
            sprite_index = spr_mecha_goat_update;
            image_speed = .25;        
        }
    }
    //show_debug_message('state 0 middle');
    if (target1 != noone) {
        // We have a target, so move to the next state
        state = 1;
        image_index = 0;
        image_speed = mouthAnimationSpeed;
        if (isUpgraded) {
            sprite_index = spr_mecha_goat_tower_open_update;
        }
    }
    
} else if (state == 1) {
    // Mouth opening

    if (image_index &lt; image_number) {
        // State still valid, so continue
        
    } else {
        // We are at the last frame, so stop animation and start the next step
        image_speed = 0;
        state = 2;
    }

} else if (state == 2) {

    if (instance_exists(target1)) {
        // Launch the goat
        goatObj1 = scr_tower_launchGoat(target1);

        // Goat(s) fired, so move to mouth delay state
        state = 3;
        mouthOpenTimeElapsed = 0;
        image_speed = 0;
        image_index = image_number - 1;
        secondGoatCountdownLeft = secondGoatCountdown; // Only has an effect if tower upgraded
        secondGoatFired = false;
        
    } else {
        // First target disappeared while mouth opening
        // Find another target
        target1 = scr_tower_getGoatTarget();
        // Keep state at 2 so this block will repeat
        // and attempt to fire at the target found
    }

} else if (state == 3) {
    // Mouth delay
    image_speed = 0;
    image_index = image_number - 1;
    // If tower is upgraded, find a second target and launch if one is found
    if (maxGoats == 2 &amp;&amp; secondGoatCountdownLeft &lt;= 0 &amp;&amp; secondGoatFired == false) {
        target2 = scr_tower_getGoatTarget(target1);
        if (target2 != noone) {
            goatObj2 = scr_tower_launchGoat(target2);
            secondGoatFired = true;
        }
    } else {
        secondGoatCountdownLeft -= global.deltaTime;
    }
    
    // Mouth open, so increment time counter
    if (mouthOpenTimeElapsed &lt; mouthOpenTime) {
        mouthOpenTimeElapsed += global.deltaTime;
    } else {
        // Mouth has been open long enough, so start the next step
        state = 4;
        image_speed = -mouthAnimationSpeed;
    }
    
} else if (state == 4) {
    // Mouth close
    if (image_index &gt; 0) {
        // Continue reverse animation to close mouth   
    } else {
        // Mouth is closed, so stop animation and switch to step 5
        image_index = 0;
        image_speed = 0;
        state = 5;
        mouthClosedTimeElapsed = 0;
        if (isUpgraded) {
            sprite_index = spr_mecha_goat_update;
            image_speed = .25;        
        }
    }
} else if (state == 5) {
    if (mouthClosedTimeElapsed &lt; mouthClosedTime) {
        mouthClosedTimeElapsed += global.deltaTime;
    } else {
        // Mouth has been closed long enough, so go to the first step
        state = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
