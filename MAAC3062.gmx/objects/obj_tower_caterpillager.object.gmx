<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower_caterpillager</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>obj_tower</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_entity_loadTowerData(0);


// Customize weapon kickback for this tower
weaponKickbackMax = 20;                 // Max kickback
weaponKickback = weaponKickbackMax;     // Start with max so gun comes out animated after created
weaponKickbackResetSpeed = 0.1;         // How quickly to lower kickback. Will be multiplied by delta time.


if(global.tutorial_part2){
    global.tutorial_part2 = false;
    global.tutorial_part3 = true;
    with(obj_messageBox){
       instance_destroy();
    }
    var tutorialBox3 = instance_create(512, 608, obj_messageBox);
    ds_list_add(tutorialBox3.list_text, "You might need some of those");
    ds_list_add(tutorialBox3.list_text, "resources later. Sell the tower"); 
    ds_list_add(tutorialBox3.list_text, "(Press 0) and you will get some of");
    ds_list_add(tutorialBox3.list_text, "the energy back.");   
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_tower_destroyed_basic);
scr_create_explosion(x + sprite_width/2, y + sprite_height/2, 'Tower');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override obj_entity's step event.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

// Decrement warmup time remaining if not 0
if (warmUpRemaining &gt; 0) { 
    warmUpRemaining -= global.deltaTime;
    image_yscale = (warmUpTotal - warmUpRemaining) / warmUpTotal;
    y = originalY + sprite_get_height(sprite_index) - image_yscale * sprite_get_height(sprite_index);
    weaponObj.image_alpha = 0;
}
else {
    warmUpRemaining = 0;
    weaponObj.image_alpha = 1;
    // Shrink any existing weapon kickback
    scr_entity_weaponKickback_Shrink();
}

if (attackRateCounter &gt;= attackRate &amp;&amp; warmUpRemaining == 0) {
    attackRateCounter = 0;
    
    var nearestEnemy = scr_misc_gearNearestObjectOfType(attackRange, obj_enemy);

    if (nearestEnemy != noone) {
        var enemyX = nearestEnemy.x + nearestEnemy.sprite_width/2;
        var enemyY = nearestEnemy.y + nearestEnemy.sprite_height/2;
        var enemyDirection = point_direction(weaponObj.x, weaponObj.y, enemyX, enemyY);
        
        // Rotate the cannon to point towards the enemy:
        var enemyX = nearestEnemy.x + nearestEnemy.sprite_width/2;
        var enemyY = nearestEnemy.y + nearestEnemy.sprite_height/2;
        var enemyDirection = point_direction(weaponObj.x, weaponObj.y, enemyX, enemyY);
        weaponObj.image_angle = enemyDirection;

        // Spawn projectile (account for any existing kickback):
        var projX = x + weaponXOffset + weaponKickbackOffsetX + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
        var projY = y + weaponYOffset + weaponKickbackOffsetY + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
        scr_spawn_projectile(obj_projectile_caterpillager, projX, projY, nearestEnemy, false, attackDamage);
        audio_play_sound(snd_basicTower, 0, false);
        audio_sound_gain(snd_basicTower, 0.4, 0);
        
        // Show projectile spawn effect:
        scr_create_explosion(projX, projY, 'Flash');
        
        // Start kickback
        scr_entity_weaponKickback_Start();
        
    }
}

// Calculate weapon position based on offset and current kickback level
scr_entity_weaponKickback_CalcOffset();

attackRateCounter += global.deltaTime;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
