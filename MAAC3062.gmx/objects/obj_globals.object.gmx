<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_levelStats</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.navPieceAttained[0] = false; // Whether or not the player has attained the first nav piece.
global.navPieceAttained[1] = false; // Whether or not the player has attained the second nav piece.
global.navPieceAttained[2] = false; // Whether or not the player has attained the third nav piece.
global.navPieceAttained[3] = false; // Whether or not the player has attained the fourth nav piece.

global.towerUnlocked[0] = true; // Basic Tower
global.towerUnlocked[1] = true; // Freezer Tower
global.towerUnlocked[2] = true; // Mortar Tower
global.towerUnlocked[3] = false; // 109 Cal Tower
global.towerUnlocked[4] = false; // Flame Tower
global.towerUnlocked[5] = false; // M6100 Tower
global.towerUnlocked[6] = false; // Goat Tower


// NOTE:
//      The "upgrade level" is a multiplier applied to the damage, range, and cost
//      values of the associated tower.
global.towerUpgradeLevel[0] = 1; // Basic Tower
global.towerUpgradeLevel[1] = 1; // Freezer Tower
global.towerUpgradeLevel[2] = 1; // Mortar Tower
global.towerUpgradeLevel[3] = 1; // 109 Cal Tower
global.towerUpgradeLevel[4] = 1; // Flame Tower
global.towerUpgradeLevel[5] = 1; // M6100 Tower
global.towerUpgradeLevel[6] = 1; // Mecha-goat Tower
global.towerUpgradeLevel[7] = 1; // Armadillo Tower
global.towerUpgradeLevel[8] = 1; // Porpoise Tower
global.towerUpgradeLevel[9] = 1; // Gorilla Tower
global.towerUpgradeLevel[10] = 1; // Electric Eel Tower
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ability Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.plrAbilityAttained[0] = false; // Whether or not the player has attained the first ability.
global.plrAbilityAttained[1] = false; // Whether or not the player has attained the second ability.
global.plrAbilityAttained[2] = false; // Whether or not the player has attained the third ability.
global.plrAbilityAttained[3] = false; // Whether or not the player has attained the fourth ability.

global.plrAbilityUpgraded[0] = false; // Whether or not the player has attained the first ability upgrade.
global.plrAbilityUpgraded[1] = false; // Whether or not the player has attained the second ability upgrade.
global.plrAbilityUpgraded[2] = false; // Whether or not the player has attained the third ability upgrade.

global.plrAbilityCooldown_normal[0] = 10000;    // Delta time value.
global.plrAbilityCooldown_normal[1] = 15000;    // Delta time value.
global.plrAbilityCooldown_normal[2] = 15000;    // Delta time value.
global.plrAbilityCooldown_normal[3] = 20000;    // Delta time value.

global.plrAbilityCooldown_upgraded[0] = 8000;   // Delta time value.
global.plrAbilityCooldown_upgraded[1] = 12000;  // Delta time value.
global.plrAbilityCooldown_upgraded[2] = 10000;  // Delta time value.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Tower Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Format:
//      Name
//      Object
//      Sprite
//      Range
//      WeaponXOffset
//      WeaponYOffset
//      ????? No clue what this is for
//      Placement distance. The distance from the player to placement location, in pixels.
//      List of strings to display on tower placement.
//      Attack Rate
//      Damage
//      Health
//      Shield
//      Weapon Object

// CATER PILLAGER:
global.towers[0, 0] = "CaterPillager";
global.towers[0, 1] = 300;
global.towers[0, 2] = obj_tower_caterpillager;
global.towers[0, 3] = spr_tower_caterpillager;
global.towers[0, 4] = 230; // sprite_get_width(global.towers[0, 3]) * 2.8;
global.towers[0, 5] = sprite_get_width(global.towers[0, 3]) / 2;
global.towers[0, 6] = 32;
global.towers[0, 7] = 200;
global.towers[0, 8] = 256;
global.towers[0, 9] = ds_list_create();
ds_list_add(global.towers[0, 9], global.towers[0, 0]);
ds_list_add(global.towers[0, 9], "Damage: Low-Medium");
ds_list_add(global.towers[0, 9], "Fire Rate: Medium");
ds_list_add(global.towers[0, 9], "Range: Medium");
ds_list_add(global.towers[0, 9], "Armor: Low-Medium");
ds_list_add(global.towers[0, 9], "Costs " + string(global.towers[0, 1]) + " Energy");
global.towers[0, 10] = scr_misc_secondsToDeltaTime(0.5);
global.towers[0, 11] = 15;
global.towers[0, 12] = 100;
global.towers[0, 13] = 100;
global.towers[0, 13] = obj_weapon_caterpillager;

// SLOTH ON A ROPE:
global.towers[1, 0] = "Sloth On a Rope";
global.towers[1, 1] = 750;
global.towers[1, 2] = obj_tower_slothOnRope;
global.towers[1, 3] = spr_tower_slothOnRope;
global.towers[1, 4] = 400;
global.towers[1, 5] = (sprite_get_width(global.towers[1, 3]) / 2) -10;
global.towers[1, 6] = 32;
global.towers[1, 7] = 200;
global.towers[1, 8] = 256;
global.towers[1, 9] = ds_list_create();
ds_list_add(global.towers[1, 9], global.towers[1, 0]);
ds_list_add(global.towers[1, 9], "Fire Rate: High");
ds_list_add(global.towers[1, 9], "Range: Medium-High");
ds_list_add(global.towers[1, 9], "Armor: High");
ds_list_add(global.towers[1, 9], "Costs " + string(global.towers[1, 1]) + " Energy");
global.towers[1, 10] = scr_misc_secondsToDeltaTime(0);
global.towers[1, 11] = 0;
global.towers[1, 12] = 100;
global.towers[1, 13] = 400;
global.towers[1, 13] = obj_weapon_sloth;

// TACTICAL TITMOUSE:
global.towers[2, 0] = "Tactical Titmouse";
global.towers[2, 1] = 1000;
global.towers[2, 2] = obj_tower_tacticalTitmouse;
global.towers[2, 3] = spr_tower_tacticalTitmouse;
global.towers[2, 4] = view_wview[0] * 0.9;
global.towers[2, 5] = (sprite_get_width(global.towers[2, 3]) / 2);
global.towers[2, 6] = 32;
global.towers[2, 7] = 200;
global.towers[2, 8] = 256;
global.towers[2, 9] = ds_list_create();
ds_list_add(global.towers[2, 9], global.towers[2, 0]);
ds_list_add(global.towers[2, 9], "Damage: Low-Medium");
ds_list_add(global.towers[2, 9], "Fire Rate: Low-Medium");
ds_list_add(global.towers[2, 9], "Range: High");
ds_list_add(global.towers[2, 9], "Armor: Very Low");
ds_list_add(global.towers[2, 9], "Costs " + string(global.towers[2, 1]) + " Energy");
global.towers[2, 10] = scr_misc_secondsToDeltaTime(4);
global.towers[2, 11] = 40;
global.towers[2, 12] = 100;
global.towers[2, 13] = 50;
global.towers[2, 13] = obj_weapon_titmouse;

// 109 CALI-BEAR RIFLE:
global.towers[3, 0] = "109 Cali-Bear Rifle";
global.towers[3, 1] = 750;
global.towers[3, 2] = obj_tower_109CaliBear;
global.towers[3, 3] = spr_tower_109CaliBear;
global.towers[3, 4] = 600; // sprite_get_width(global.towers[3, 3]) * 6;
global.towers[3, 5] = (sprite_get_width(global.towers[3, 3]) / 2) - 5;
global.towers[3, 6] = 10;
global.towers[3, 7] = 200;
global.towers[3, 8] = 256;
global.towers[3, 9] = ds_list_create();
ds_list_add(global.towers[3, 9], global.towers[3, 0]);
ds_list_add(global.towers[3, 9], "Damage: Low-Medium");
ds_list_add(global.towers[3, 9], "Fire Rate: Low");
ds_list_add(global.towers[3, 9], "Range: High");
ds_list_add(global.towers[3, 9], "Armor: Medium");
ds_list_add(global.towers[3, 9], "Costs " + string(global.towers[3, 1]) + " Energy");
global.towers[3, 10] = scr_misc_secondsToDeltaTime(2);
global.towers[3, 11] = 35;
global.towers[3, 12] = 100;
global.towers[3, 13] = 200;
global.towers[3, 13] = obj_weapon_caliBear;

// FIREANT HOSE:
global.towers[4, 0] = "FireAnt Hose";
global.towers[4, 1] = 1500;
global.towers[4, 2] = obj_tower_fireAnt;
global.towers[4, 3] = spr_tower_fireAnt;
global.towers[4, 4] = 130; // sprite_get_width(global.towers[4, 3]);
global.towers[4, 5] = sprite_get_width(global.towers[4, 3]) / 2;
global.towers[4, 6] = 32;
global.towers[4, 7] = 200;
global.towers[4, 8] = 256;
global.towers[4, 9] = ds_list_create();
ds_list_add(global.towers[4, 9], global.towers[4, 0]);
ds_list_add(global.towers[4, 9], "Damage: Medium");
ds_list_add(global.towers[4, 9], "Fire Rate: High");
ds_list_add(global.towers[4, 9], "Range: Low");
ds_list_add(global.towers[4, 9], "Armor: High");
ds_list_add(global.towers[4, 9], "Costs " + string(global.towers[4, 1]) + " Energy");
global.towers[4, 10] = scr_misc_secondsToDeltaTime(0.125);
global.towers[4, 11] = 0;
global.towers[4, 12] = 100;
global.towers[4, 13] = 400;
global.towers[4, 13] = obj_weapon_fireAnt;

// RT-6100
global.towers[5, 0] = "RT-6100";
global.towers[5, 1] = 2000;
global.towers[5, 2] = obj_tower_RT6100;
global.towers[5, 3] = spr_tower_RT6100;
global.towers[5, 4] = 400;
global.towers[5, 5] = sprite_get_width(global.towers[5, 3]) / 2;
global.towers[5, 6] = (sprite_get_height(global.towers[5, 3]) / 2) - 16;
global.towers[5, 7] = 200;
global.towers[5, 8] = 256;
global.towers[5, 9] = ds_list_create();
ds_list_add(global.towers[5, 9], global.towers[5, 0]);
ds_list_add(global.towers[5, 9], "Damage: High");
ds_list_add(global.towers[5, 9], "Fire Rate: High");
ds_list_add(global.towers[5, 9], "Range: High");
ds_list_add(global.towers[5, 9], "Armor: High");
ds_list_add(global.towers[5, 9], "Costs " + string(global.towers[5, 1]) + " Energy");
global.towers[5, 10] = scr_misc_secondsToDeltaTime(0.084);
global.towers[5, 11] = 3;
global.towers[5, 12] = 100;
global.towers[5, 13] = 800;
global.towers[5, 13] = obj_weapon_rt6100;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Level Data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.levelStats = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
