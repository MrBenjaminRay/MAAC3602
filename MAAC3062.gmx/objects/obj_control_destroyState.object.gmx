<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dummy_buildStateControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>costRecoveryPercentage</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.25</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    scr_state_setNormal();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Destroy tower if one is selected.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != "Paused") {
    var intersectedTower = collision_rectangle(mouse_x, mouse_y, mouse_x, mouse_y, obj_tower, false, true);
    
    if (intersectedTower != noone) {
        var towerHealthPct = intersectedTower.currHealth/intersectedTower.maxHealth;
    
        switch (intersectedTower.object_index) {
            case obj_tower_caterpillager: {
                scr_energy_change(((global.towers[0, 1] * global.towerUpgradeLevel[0]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
            case obj_tower_slothOnRope: {
                scr_energy_change(((global.towers[1, 1] * global.towerUpgradeLevel[1]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
            case obj_tower_tacticalTitmouse: {
                scr_energy_change(((global.towers[2, 1] * global.towerUpgradeLevel[2]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
            case obj_tower_109CaliBear: {
                scr_energy_change(((global.towers[3, 1] * global.towerUpgradeLevel[3]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
            case obj_tower_fireAnt: {
                scr_energy_change(((global.towers[4, 1] * global.towerUpgradeLevel[4]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
            case obj_tower_RT6100: {
                scr_energy_change(((global.towers[5, 1] * global.towerUpgradeLevel[5]) * towerHealthPct) * costRecoveryPercentage);
                break;
            }
        }
    
        with (intersectedTower) {
            instance_destroy();
            global.part3 = false;
        }
        
        scr_state_setNormal();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

var intersectedTower = collision_rectangle(mouse_x, mouse_y, mouse_x, mouse_y, obj_tower, false, true);

if (intersectedTower != noone) {
    with (intersectedTower) {
        draw_sprite_stretched(spr_destroy_overlay, 0, intersectedTower.x, intersectedTower.y, intersectedTower.sprite_width, intersectedTower.sprite_height);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
