<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_camera</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var vw;         // Width of viewport. Will be calculated based on height and
                // aspect ratio of display.
var vh = 500;   // Desired height of viewport (use fixed height for all screens, maybe height
                // range in the future to be more flexible.

// NOTE: Could set vh based on view in room so level designer can tweak it in UI instead of this code

// Set width of view dynamically based on screen ratio
view_hview[0] = vh;
view_wview[0] = vh * global.screenRatio;

// Where camera wants to be (based mainly on player position &amp; angle)
desiredX = 0;
desiredY = 0;
maxSpeed = 15;
speedChangeRate = 1; // Amount by which to increase/decrease speed when travelling to desired position
speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// For now, follow player exactly. In future, will smoothly slide camera
// in front of the player based on where he is facing.

if (instance_number(obj_player) &gt; 0) {
    // Player is on level, so follow him.
    
    desiredX = obj_player.x + obj_player.walkingDirection * 100;
    desiredY = obj_player.y;
    y = desiredY;
    
    if (abs(x-desiredX) &gt; 10) {
        // Need to move towards desired point
        direction = point_direction(x, y, desiredX, desiredY);
        if (speed &lt; maxSpeed) {
            speed += speedChangeRate;
        }
    } else {
        x = desiredX;
        speed = 0;
    }
    
} else {
    // M-6100 will probably be in-place and mounted by player, so
    // we may want to follow where the cannon is located. For now,
    // stay still.
}

// Set to .5 to see camera position when troubleshootig, or 0 to hide
image_alpha = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
