<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower_tacticalTitmouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>obj_tower</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
 *  NOTE: Range controls how far this cannon can target an enemy, but the projectileSpeed and projectileGravity below
 *  determine how far the tower can actually shoot once an enemy is selected.  If the tower is not firing at enemies
 *  that are being selected, it is likely because no firing angle could be worked out based on the speed &amp; gravity.
 *  A very small increase in the speed will give longer range.  Use it gently and only if required, as the projectile
 *  will fly higher and faster, which makes it harder for the player to see what the projectile is actually doing.
 *  Upgrade level already increases projectileSpeed, thereby increasing ability to hit targets farther away.
 *  -Ben
 */

scr_entity_loadTowerData(2);

// Special stuff just for mortar
attackRange_min = 10;
projectileSpeed = 7 * global.towerUpgradeLevel[2];
projectileGravity = .05;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_tower_destroyed_tacticalTitmouse);
scr_create_explosion(x + sprite_width/2, y + sprite_height/2, 'Tower');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override obj_entity's step event.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (attackRateCounter &gt;= attackRate) {
    attackRateCounter = 0;

    // In this case, nearestEnemy means nearest enemy within range of cannon (has minimum and maximum range)
    var nearestEnemy = scr_entity_gearNearestObjectOfType(attackRange, obj_enemy_ground, attackRange_min);
    
    if (nearestEnemy != noone) {
    
        // For this rough calculation, we use a central point on the tower where the weapon is mounted.
        // Can't use the end of the weapon as the weapon angle is not yet known.
        var sourceX = x + weaponXOffset;
        var sourceY = y + weaponYOffset;
        
        var angleRad = scr_tower_calcBallisticFiringAngle(sourceX, sourceY, nearestEnemy.x, nearestEnemy.y, projectileSpeed, projectileGravity);
        var angleDeg = radtodeg(angleRad);
        
        if (angleRad == noone) {
            show_debug_message('No valid ballistic path from titmouse cannon to selected target.');
            // Should probably try a different enemy at this point instead of missing a turn to shoot
        } else {
            //show_debug_message('Angle selected: ' + string(angleRad) + '(' + string(angleDeg) + ' deg)');
            
            // Rotate the cannon to point towards the launch angle
            weaponObj.image_angle = angleDeg;
            // Spawn projectile
            var projX = x + weaponXOffset + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
            var projY = y + weaponYOffset + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
            var proj = instance_create(projX, projY, obj_projectile_titmouse);
            proj.direction = angleDeg;
            proj.speed = projectileSpeed;
            proj.gravity = projectileGravity;
            proj.isEnemyProjectile = false;
            proj.damage = attackDamage;
            proj.xDest = nearestEnemy.x; // This isn't used by titmouse, but store it anyway
            proj.yDest = nearestEnemy.y; // This helps us know when the titmouse should no longer pass through platforms
            
            audio_play_sound(snd_mortar, 0, false);
            audio_sound_gain(snd_mortar, 0.65, 0);
            // Show projectile spawn effect:
            scr_create_explosion(projX, projY, 'Flash');            
        }
    }
}

attackRateCounter += global.deltaTime;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
