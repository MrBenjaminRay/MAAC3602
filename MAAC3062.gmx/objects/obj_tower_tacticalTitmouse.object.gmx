<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower_tacticalTitmouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>40</depth>
  <persistent>0</persistent>
  <parentName>obj_tower</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attackRate = 4096;
attackRateCounter = 0;
attackDamage = 40 * global.towerUpgradeLevel[2];
attackRange = global.towers[2, 4] * global.towerUpgradeLevel[2];

weaponXOffset = global.towers[2, 5];
weaponYOffset = global.towers[2, 6];
weaponObj = instance_create(x + weaponXOffset, y + weaponYOffset, obj_weapon_mortar);

currShield = 50;
currHealth = 100;

maxShield = 50;
maxHealth = 100;

// Place weapon:

if (weaponObj != noone &amp;&amp; instance_exists(weaponObj)) {
    weaponObj.x = x + weaponXOffset;
    weaponObj.y = y + weaponYOffset;
}

// Special stuff just for mortar
attackRange_min = 100;
// Use a min &amp; max attack angle for cannon so that instead of shooting straight down
// towards a target, it will always shoot up
// This may not be necessary depending on how the trajectory is implemented.
// For now, it's not used at all. -Ben
minAngle = 0;
maxAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_tower_destroyed_tacticalTitmouse);
scr_create_explosion(x + sprite_width/2, y + sprite_height/2, 'Tower');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Override obj_entity's step event.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == "Paused") {
    return 0;
}

if (attackRateCounter &gt;= attackRate) {
    attackRateCounter = 0;

    // In this case, nearestEnemy means nearest enemy within range of cannon (has minimum and maximum range)
    var nearestEnemy = scr_entity_gearNearestObjectOfType(attackRange, obj_enemy_ground, attackRange_min);
    
    if (nearestEnemy != noone) {
    
        // For this rough calculation, we use a central point on the tower where the weapon is mounted.
        // Can't use the end of the weapon as the weapon angle is not yet known.
        var sourceX = x + weaponXOffset;
        var sourceY = y + weaponYOffset;
        
        var angleRad = scr_tower_calcBallisticFiringAngle(sourceX, sourceY, nearestEnemy.x, nearestEnemy.y, 5, .05);
        //var angleRad = scr_tower_calcBallisticFiringAngle(sourceX, sourceY, mouse_x, mouse_y, 5, .1);
        var angleDeg = radtodeg(angleRad);
        
        if (angleRad == noone) {
            show_debug_message('No valid ballistic path to this projectile.');
            // Should probably try a different enemy at this point instead of missing a turn to shoot
        } else {
            show_debug_message('Angle selected: ' + string(angleRad) + '(' + string(angleDeg) + ' deg)');
            weaponObj.image_angle = angleDeg;
            // Spawn projectile
            var projX = x + weaponXOffset + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
            var projY = y + weaponYOffset + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
            var proj = instance_create(projX, projY, obj_projectile_titmouse);
            proj.direction = angleDeg;
            proj.speed = 5;
            proj.gravity = .05;
        }
        
        // Rotate the cannon to point at the angle required to hit the enemy
        //var enemyX = nearestEnemy.x + nearestEnemy.sprite_width/2;
        //var enemyY = nearestEnemy.y + nearestEnemy.sprite_height/2;
        //var enemyDirection = point_direction(weaponObj.x, weaponObj.y, enemyX, enemyY);

        return 0;
        
//        var enemyDistX = enemyX - x;
//        var enemyDistY = -(enemyY - y);
//        var g = 9.81; // Gravity - replace this with something better later
//        var v = 50; // Velocity - replace this with something better later

//        var inner = power(v, 4) - g * ( g * power(enemyDistX,2) + 2*enemyDistY*power(v,2) );
//        show_debug_message(inner);
        
//        var launchAngleInner = power(v,2) + sqrt( inner ) / g * enemyDistX
//        show_debug_message(launchAngleInner);
        
//        var launchAngle = arctan( launchAngleInner );
//        show_debug_message(launchAngle);
        
        // Spawn projectile:
        var projX = x + weaponXOffset + (weaponObj.sprite_width * cos(degtorad(weaponObj.image_angle)));
        var projY = y + weaponYOffset + (weaponObj.sprite_width * -sin(degtorad(weaponObj.image_angle)));
        scr_spawn_projectile(obj_projectile_titmouse, projX, projY, nearestEnemy, false, attackDamage);
        audio_play_sound(snd_mortar, 0, false);
        audio_sound_gain(snd_mortar, 0.65, 0);
        // Show projectile spawn effect:
        scr_create_explosion(projX, projY, 'Flash');
    }
}

attackRateCounter += global.deltaTime;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
