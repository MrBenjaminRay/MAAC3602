<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_particle_energy_orb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_particle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set a high enough lifeLeft so that the particles have time to erupt
// and make it where they need to go, but that they don't last forever
// if they're not killed when they should be killed.
lifeLeft = 10000;

angle = random_range(0, 2*pi);
angleChange = random_range(-.003, .003); // Slight randomized twist
initialSpeed = random_range(.001, .2);
speedChange = .98;
currentSpeed = initialSpeed;

speedTowardsTarget = random_range(0.02, 0.04);
speedTowardsTargetChange = 1.05;
speedTowardsTargetMax = 10;
image_index = irandom_range(0, image_number-1);
image_speed = random_range(0.1, 0.25);
image_alpha = random_range(.7, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x += cos(angle) * currentSpeed * global.deltaTime;
y += sin(angle) * currentSpeed * global.deltaTime;

angle += angleChange * global.deltaTime;
currentSpeed *= speedChange;

// Get direction vector towards energy level indicator
if (object_exists(obj_level_energy)) {
    var dir = degtorad(point_direction(x, y, obj_level_energy.x, obj_level_energy.y));    
} else {
    // This is bad - can't have energy orbs on a level if there's nowhere for them to go (energy level indicator)
    show_debug_message("Level is missing obj_level_energy!");
    return 0;
}

speedTowardsTarget *= speedTowardsTargetChange;
if (speedTowardsTarget &gt; speedTowardsTargetMax) {
    speedTowardsTarget = speedTowardsTargetMax;
}
x += cos(dir) * speedTowardsTarget * global.deltaTime;
y -= sin(dir) * speedTowardsTarget * global.deltaTime; // Subtract as y is inverted

// Special condition:  If orb ends up outside of the screen bounds, 
// move it to the same location as the energy level so that it will collide and
// give the amount, and kill the speed. This might happen if the speed of the orb 
// causes it to overshoot the energy level object, in which case collision would 
// not occur.
if (x &lt; 0 || x &gt; window_get_width() || y &lt; 0 || y &gt; window_get_height()) {
    if (object_exists(obj_level_energy)) {
        x = obj_level_energy.x;
        y = obj_level_energy.y;
        speedTowardsTarget = 0;
    } else {
        // Should never get here as we check for obj_level_energy to exist earlier in this code
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_level_energy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_energy_change(1);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
