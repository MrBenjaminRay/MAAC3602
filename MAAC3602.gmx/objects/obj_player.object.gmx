<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Define Local Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementSpeed = 3;    // Left/Right Movement Speed
jumpSpeed = 6;        // Jump Movement Speed
currentJumpSpeed = 6; // Current Jump Movement Speed
currentDropSpeed = 0; // Current Drop Movement Speed
currentFallSpeed = 0; // Current Fall Movement Speed
gravConst = 0.150;    // Gravity Constant
isJumping = false;    // Whether or not the player is jumping.
isDropping = false;   // Whether or not the player is dropping to a lower platform.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// LEFT &amp; RIGHT MOVEMENT:
var isLeftPressed = keyboard_check(ord('a')) || keyboard_check(ord('A'));
var isRightPressed = keyboard_check(ord('d')) || keyboard_check(ord('D'));

if (isLeftPressed) {
    if (place_meeting(x - movementSpeed, y, obj_tile) == false) {
        x -= movementSpeed;
    } else {
        // Fix gaps between player and tiles where movement speed is too great to reach.
        while (place_meeting(x - 1, y, obj_tile) == false) {
            x--;
        }
    }
}

if (isRightPressed) {
    if (place_meeting(x + movementSpeed, y, obj_tile) == false) {
        x += movementSpeed;
    } else {
        // Fix gaps between player and tiles where movement speed is too great to reach.
        while (place_meeting(x + 1, y, obj_tile) == false) {
            x++;
        }
    }
}

// JUMPING:
if (isJumping &amp;&amp; !isDropping) {
    currentJumpSpeed += gravConst;
    
    var isNextPosACollision = place_meeting(x, y + currentJumpSpeed, obj_tile);
    
    if (isNextPosACollision) {
        isJumping = false;
        currentJumpSpeed = 0;
        
        var isCollisionAbove = isNextPosACollision &amp; place_meeting(x, y - 1, obj_tile);
        var isCollisionBelow = isNextPosACollision &amp; place_meeting(x, y + 1, obj_tile);
    
        // If the next position has the player colliding with a tile above it,
        // then alter the jump and jump up state:
        if (isCollisionAbove) {
        }
        
        // If the next position has the player colliding with a tile below it,
        // then move the player onto the tile:
        if (isCollisionBelow) {
        }
    } else {
        y += currentJumpSpeed;
    }
}

// DROPPING:
if (!isJumping &amp;&amp; isDropping) {
    if (currentDropSpeed == 0) {
        currentDropSpeed = movementSpeed;
    } else {
        currentDropSpeed += gravConst;
    }


    // If there is no collision at the new location, then change the drop state
    // and allow the fall code to take over:
    if (place_meeting(x, y + currentDropSpeed, obj_tile) == false) {
        y += currentDropSpeed;
        isDropping = false;
        currentDropSpeed = 0;
    } else {
        y += currentDropSpeed;
     }
}

// FALLING:
if (!isJumping &amp;&amp; !isDropping) {
    if (currentFallSpeed == 0) {
        currentFallSpeed = movementSpeed;
    } else {
        currentFallSpeed += gravConst;
    }
    
    var collisionAtNewLocation = place_meeting(x, y + currentFallSpeed, obj_tile);
    
    // If there is a collision at the new location, then do nothing and reset fall data:
    if (collisionAtNewLocation) {
        currentFallSpeed = 0;
        
        while (place_meeting(x, y + 1, obj_tile) == false) {
            y++;
        }
    }
    
    // If there is no collision at the new location, then continue falling:
    if (collisionAtNewLocation == false) {
        y += currentFallSpeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// To Jump:
//      Must not be jumping.
//      Must be standing on the ground.
var canJump = isJumping == false;
canJump &amp;= place_meeting(x, y + 1, obj_tile);

if (canJump) {
    currentJumpSpeed = -abs(jumpSpeed);
    isJumping = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isDropping</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
